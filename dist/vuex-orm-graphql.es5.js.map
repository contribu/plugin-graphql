{"version":3,"file":"vuex-orm-graphql.es5.js","sources":["../node_modules/pluralize/pluralize.js","../src/support/utils.ts","../src/common/logger.ts","../src/orm/model.ts","../src/graphql/transformer.ts","../src/graphql/apollo.ts","../src/graphql/schema.ts","../src/common/context.ts","../src/graphql/query-builder.ts","../src/orm/store.ts","../src/graphql/name-generator.ts","../src/actions/action.ts","../src/actions/destroy.ts","../src/actions/fetch.ts","../src/actions/mutate.ts","../src/actions/persist.ts","../src/actions/push.ts","../src/actions/query.ts","../src/actions/simple-query.ts","../src/actions/simple-mutation.ts","../src/vuex-orm-graphql.ts","../src/plugin.ts"],"sourcesContent":["/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Upper cased words. E.g. \"HELLO\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['whiskey', 'whiskies']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/(m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/(m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],\n    [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'alcohol',\n    'ammo',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'manga',\n    'news',\n    'pike',\n    'plankton',\n    'pliers',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transporation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","// import { parse } from \"graphql/language/parser\";\n// import { print } from \"graphql/language/printer\";\n// import { DocumentNode } from \"graphql/language/ast\";\n\n// @ts-ignore\n// import lodashIsEqual from \"lodash.isequal\";\n\n// @ts-ignore\n// import lodashClone from \"lodash.clone\";\n\n// @ts-ignore\nimport pluralizeLib from \"pluralize\";\nexport const pluralize = pluralizeLib.plural;\nexport const singularize = pluralizeLib.singular;\n\n/**\n * Capitalizes the first letter of the given string.\n *\n * @param {string} input\n * @returns {string}\n */\nexport function upcaseFirstLetter(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1);\n}\n\n/**\n * Down cases the first letter of the given string.\n *\n * @param {string} input\n * @returns {string}\n */\nexport function downcaseFirstLetter(input: string) {\n  return input.charAt(0).toLowerCase() + input.slice(1);\n}\n\n/**\n * Takes a string with a graphql query and formats it. Useful for debug output and the tests.\n * @param {string} query\n * @returns {string}\n */\nexport function prettify(query: string): string {\n  return query;\n  // return print(parseQuery(query));\n}\n\n/**\n * Returns a parsed query as GraphQL AST DocumentNode.\n *\n * @param {string | DocumentNode} query - Query as string or GraphQL AST DocumentNode.\n *\n * @returns {DocumentNode} Query as GraphQL AST DocumentNode.\n */\nexport function parseQuery(query: string): string {\n  return query;\n  // return typeof query === \"string\" ? parse(query) : query;\n}\n\n/**\n * @param {DocumentNode} query - The GraphQL AST DocumentNode.\n *\n * @returns {string} the GraphQL query within a DocumentNode as a plain string.\n */\nexport function graphQlDocumentToString(query: string): string {\n  return query;\n  // return query.loc!.source.body;\n}\n\n/**\n * Tells if a object is just a simple object.\n *\n * @param {any} obj - Value to check.\n */\nexport function isPlainObject(obj: any): boolean {\n  // Basic check for Type object that's not null\n  return obj !== null && typeof obj === \"object\";\n}\n\n/**\n * Creates an object composed of the picked `object` properties.\n * @param {object} object - Object.\n * @param {array} props - Properties to pick.\n */\nexport function pick(object: any, props: Array<string>) {\n  if (!object) {\n    return {};\n  }\n\n  let index = -1;\n  const length = props.length;\n  const result = {};\n\n  while (++index < length) {\n    const prop = props[index];\n    result[prop] = object[prop];\n  }\n\n  return result;\n}\n\n// export function isEqual(a: object, b: object): boolean {\n//   // Couldn' find a simpler working implementation yet.\n//   return lodashIsEqual(a, b);\n// }\n\n// export function clone(input: any): any {\n//   // Couldn' find a simpler working implementation yet.\n//   return lodashClone(input);\n// }\n\nexport function takeWhile(\n  array: Array<any>,\n  predicate: (x: any, idx: number, array: Array<any>) => any\n) {\n  let index = -1;\n\n  while (++index < array.length && predicate(array[index], index, array)) {\n    // just increase index\n  }\n\n  return array.slice(0, index);\n}\n\n// export function matches(source: any) {\n//   source = clone(source);\n//\n//   return (object: any) => isEqual(object, source);\n// }\n\nexport function removeSymbols(input: any) {\n  return JSON.parse(JSON.stringify(input));\n}\n","// import { DocumentNode } from \"graphql/language/ast\";\nimport { Arguments } from \"../support/interfaces\";\n// import { FetchPolicy } from \"apollo-client\";\nimport { isPlainObject, prettify } from \"../support/utils\";\n\n/**\n * Vuex-ORM-Apollo Debug Logger.\n * Wraps console and only logs if enabled.\n *\n * Also contains some methods to format graphql queries for the output\n */\nexport default class Logger {\n  /**\n   * Tells if any logging should happen\n   * @type {boolean}\n   */\n  private readonly enabled: boolean;\n\n  /**\n   * Fancy Vuex-ORM-Apollo prefix for all log messages.\n   * @type {string[]}\n   */\n  private readonly PREFIX = [\n    \"%c Vuex-ORM: GraphQL Plugin %c\",\n    \"background: #35495e; padding: 1px 0; border-radius: 3px; color: #eee;\",\n    \"background: transparent;\"\n  ];\n\n  /**\n   * @constructor\n   * @param {boolean} enabled Tells if any logging should happen\n   */\n  public constructor(enabled: boolean) {\n    this.enabled = enabled;\n    this.log(\"Logging is enabled.\");\n  }\n\n  /**\n   * Wraps console.group. In TEST env console.log is used instead because console.group doesn't work on CLI.\n   * If available console.groupCollapsed will be used instead.\n   * @param {Array<any>} messages\n   */\n  public group(...messages: Array<any>): void {\n    if (this.enabled) {\n      if (console.groupCollapsed) {\n        console.groupCollapsed(...this.PREFIX, ...messages);\n      } else {\n        console.log(...this.PREFIX, ...messages);\n      }\n    }\n  }\n\n  /**\n   * Wrapper for console.groupEnd. In TEST env nothing happens because console.groupEnd doesn't work on CLI.\n   */\n  public groupEnd(): void {\n    if (this.enabled && console.groupEnd) console.groupEnd();\n  }\n\n  /**\n   * Wrapper for console.log.\n   * @param {Array<any>} messages\n   */\n  public log(...messages: Array<any>): void {\n    if (this.enabled) {\n      console.log(...this.PREFIX, ...messages);\n    }\n  }\n\n  /**\n   * Wrapper for console.warn.\n   * @param {Array<any>} messages\n   */\n  public warn(...messages: Array<any>): void {\n    if (this.enabled) {\n      console.warn(...this.PREFIX, ...messages);\n    }\n  }\n\n  /**\n   * Logs a graphql query in a readable format and with all information like fetch policy and variables.\n   * @param {string | DocumentNode} query\n   * @param {Arguments} variables\n   * @param {FetchPolicy} fetchPolicy\n   */\n  public logQuery(query: string, variables?: Arguments, fetchPolicy?: any) {\n    if (this.enabled) {\n      try {\n        let prettified = prettify(query as string);\n\n        this.group(\n          \"Sending query:\",\n          prettified\n            .split(\"\\n\")[1]\n            .replace(\"{\", \"\")\n            .trim()\n        );\n        console.log(prettified);\n\n        if (variables) console.log(\"VARIABLES:\", variables);\n        if (fetchPolicy) console.log(\"FETCH POLICY:\", fetchPolicy);\n\n        this.groupEnd();\n      } catch (e) {\n        console.error(\"[Vuex-ORM-Apollo] There is a syntax error in the query!\", e, query);\n      }\n    }\n  }\n}\n","import { Model as ORMModel } from \"@vuex-orm/core\";\nimport { Field } from \"../support/interfaces\";\nimport Context from \"../common/context\";\nimport { Mock, MockOptions } from \"../test-utils\";\nimport { pluralize, singularize } from \"../support/utils\";\n\n/**\n * Wrapper around a Vuex-ORM model with some useful methods.\n *\n * Also provides a mock system, to define mocking responses for actions.\n */\nexport default class Model {\n  /**\n   * The singular name of a model like `blogPost`\n   * @type {string}\n   */\n  public readonly singularName: string;\n\n  /**\n   * The plural name of a model like `blogPosts`\n   * @type {string}\n   */\n  public readonly pluralName: string;\n\n  /**\n   * The original Vuex-ORM model\n   */\n  public readonly baseModel: ORMModel;\n\n  /**\n   * The fields of the model\n   * @type {Map<string, Field>}\n   */\n  public readonly fields: Map<string, Field> = new Map<string, Field>();\n\n  /**\n   * Container for the mocks.\n   * @type {Object}\n   */\n  private mocks: { [key: string]: Array<Mock> } = {};\n\n  /**\n   * @constructor\n   * @param {Model} baseModel The original Vuex-ORM model\n   */\n  public constructor(baseModel: ORMModel) {\n    this.baseModel = baseModel;\n\n    // Generate name variants\n    this.singularName = singularize(this.baseModel.entity);\n    this.pluralName = pluralize(this.baseModel.entity);\n\n    // Cache the fields of the model in this.fields\n    const fields = this.baseModel.fields();\n    Object.keys(fields).forEach((name: string) => {\n      this.fields.set(name, fields[name]);\n    });\n  }\n\n  /**\n   * Tells if a field is a numeric field.\n   *\n   * @param {Field | undefined} field\n   * @returns {boolean}\n   */\n  public static isFieldNumber(field: Field | undefined): boolean {\n    if (!field) return false;\n\n    const context = Context.getInstance();\n    return (\n      field instanceof context.components.Number || field instanceof context.components.Increment\n    );\n  }\n\n  /**\n   * Tells if a field is a attribute (and thus not a relation)\n   * @param {Field} field\n   * @returns {boolean}\n   */\n  public static isFieldAttribute(field: Field): boolean {\n    const context = Context.getInstance();\n\n    return (\n      field instanceof context.components.Increment ||\n      field instanceof context.components.Attr ||\n      field instanceof context.components.String ||\n      field instanceof context.components.Number ||\n      field instanceof context.components.Boolean\n    );\n  }\n\n  /**\n   * Tells if a field which represents a relation is a connection (multiple).\n   * @param {Field} field\n   * @returns {boolean}\n   */\n  public static isConnection(field: Field): boolean {\n    const context = Context.getInstance();\n\n    return !(\n      field instanceof context.components.BelongsTo ||\n      field instanceof context.components.HasOne ||\n      field instanceof context.components.MorphTo ||\n      field instanceof context.components.MorphOne\n    );\n  }\n\n  /**\n   * Adds $isPersisted and other meta fields to the model by overwriting the fields() method.\n   * @todo is this a good way to add fields?\n   * @param {Model} model\n   */\n  public static augment(model: Model) {\n    const originalFieldGenerator = model.baseModel.fields.bind(model.baseModel);\n\n    model.baseModel.fields = () => {\n      const originalFields = originalFieldGenerator();\n\n      originalFields[\"$isPersisted\"] = model.baseModel.boolean(false);\n\n      return originalFields;\n    };\n  }\n\n  /**\n   * Returns all fields which should be included in a graphql query: All attributes which are not included in the\n   * skipFields array or start with $.\n   * @returns {Array<string>} field names which should be queried\n   */\n  public getQueryFields(): Array<string> {\n    const fields: Array<string> = [];\n\n    this.fields.forEach((field: Field, name: string) => {\n      if (Model.isFieldAttribute(field) && !this.skipField(name)) {\n        fields.push(name);\n      }\n    });\n\n    return fields;\n  }\n\n  /**\n   * Tells if a field should be ignored. This is true for fields that start with a `$` or is it is within the skipField\n   * property or is the foreignKey of a belongsTo/hasOne relation.\n   *\n   * @param {string} field\n   * @returns {boolean}\n   */\n  public skipField(field: string) {\n    if (field.startsWith(\"$\")) return true;\n    if (this.baseModel.skipFields && this.baseModel.skipFields.indexOf(field) >= 0) return true;\n\n    const context = Context.getInstance();\n\n    let shouldSkipField: boolean = false;\n\n    this.getRelations().forEach((relation: Field) => {\n      if (\n        (relation instanceof context.components.BelongsTo ||\n          relation instanceof context.components.HasOne) &&\n        relation.foreignKey === field\n      ) {\n        shouldSkipField = true;\n        return false;\n      }\n      return true;\n    });\n\n    return shouldSkipField;\n  }\n\n  /**\n   * @returns {Map<string, Field>} all relations of the model which should be included in a graphql query\n   */\n  public getRelations(): Map<string, Field> {\n    const relations = new Map<string, Field>();\n\n    this.fields.forEach((field: Field, name: string) => {\n      if (!Model.isFieldAttribute(field)) {\n        relations.set(name, field);\n      }\n    });\n\n    return relations;\n  }\n\n  /**\n   * This accepts a field like `subjectType` and checks if this is just randomly named `...Type` or it is part\n   * of a polymorphic relation.\n   * @param {string} name\n   * @returns {boolean}\n   */\n  public isTypeFieldOfPolymorphicRelation(name: string): boolean {\n    const context = Context.getInstance();\n    let found: boolean = false;\n\n    context.models.forEach(model => {\n      if (found) return false;\n\n      model.getRelations().forEach(relation => {\n        if (\n          relation instanceof context.components.MorphMany ||\n          relation instanceof context.components.MorphedByMany ||\n          relation instanceof context.components.MorphOne ||\n          relation instanceof context.components.MorphTo ||\n          relation instanceof context.components.MorphToMany\n        ) {\n          if (\n            relation.type === name &&\n            relation.related &&\n            relation.related.entity === this.baseModel.entity\n          ) {\n            found = true;\n            return false;\n          }\n        }\n\n        return true;\n      });\n\n      return true;\n    });\n\n    return found;\n  }\n\n  /**\n   * Returns a record of this model with the given ID.\n   * @param {number} id\n   * @returns {any}\n   */\n  public getRecordWithId(id: number) {\n    return this.baseModel\n      .query()\n      .withAllRecursive()\n      .where(\"id\", id)\n      .first();\n  }\n\n  /**\n   * Determines if we should eager load (means: add as a field in the graphql query) a related entity. belongsTo or\n   * hasOne related entities are always eager loaded. Others can be added to the `eagerLoad` array of the model.\n   *\n   * @param {string} fieldName Name of the field\n   * @param {Field} field Relation field\n   * @param {Model} relatedModel Related model\n   * @returns {boolean}\n   */\n  public shouldEagerLoadRelation(fieldName: string, field: Field, relatedModel: Model): boolean {\n    const context = Context.getInstance();\n\n    if (\n      field instanceof context.components.HasOne ||\n      field instanceof context.components.BelongsTo ||\n      field instanceof context.components.MorphOne\n    ) {\n      return true;\n    }\n\n    const eagerLoadList: Array<String> = this.baseModel.eagerLoad || [];\n    return (\n      eagerLoadList.find(n => {\n        return n === relatedModel.singularName || n === relatedModel.pluralName || n === fieldName;\n      }) !== undefined\n    );\n  }\n\n  /**\n   * Adds a mock.\n   *\n   * @param {Mock} mock - Mock config.\n   * @returns {boolean}\n   */\n  // public $addMock(mock: Mock): boolean {\n  //   if (this.$findMock(mock.action, mock.options)) return false;\n  //   if (!this.mocks[mock.action]) this.mocks[mock.action] = [];\n  //\n  //   this.mocks[mock.action].push(mock);\n  //   return true;\n  // }\n\n  /**\n   * Finds a mock for the given action and options.\n   *\n   * @param {string} action - Name of the action like 'fetch'.\n   * @param {MockOptions} options - MockOptions like { variables: { id: 42 } }.\n   * @returns {Mock | null} null when no mock was found.\n   */\n  // public $findMock(action: string, options: MockOptions | undefined): Mock | null {\n  //   if (this.mocks[action]) {\n  //     return (\n  //       this.mocks[action].find(m => {\n  //         if (!m.options || !options) return true;\n  //\n  //         const relevantOptions = pick(options, Object.keys(m.options));\n  //         return isEqual(relevantOptions, m.options || {});\n  //       }) || null\n  //     );\n  //   }\n  //\n  //   return null;\n  // }\n\n  /**\n   * Hook to be called by all actions in order to get the mock returnValue.\n   *\n   * @param {string} action - Name of the action like 'fetch'.\n   * @param {MockOptions} options - MockOptions.\n   * @returns {any} null when no mock was found.\n   */\n  // public $mockHook(action: string, options: MockOptions): any {\n  //   let returnValue: null | { [key: string]: any } = null;\n  //   const mock = this.$findMock(action, options);\n  //\n  //   if (mock) {\n  //     if (mock.returnValue instanceof Function) {\n  //       returnValue = mock.returnValue();\n  //     } else {\n  //       returnValue = mock.returnValue || null;\n  //     }\n  //   }\n  //\n  //   if (returnValue) {\n  //     if (returnValue instanceof Array) {\n  //       returnValue.forEach(r => (r.$isPersisted = true));\n  //     } else {\n  //       returnValue.$isPersisted = true;\n  //     }\n  //\n  //     return { [this.pluralName]: returnValue };\n  //   }\n  //\n  //   return null;\n  // }\n}\n","import { Data, Field } from \"../support/interfaces\";\nimport Model from \"../orm/model\";\nimport { Model as ORMModel } from \"@vuex-orm/core\";\nimport Context from \"../common/context\";\nimport {\n  pluralize,\n  singularize,\n  downcaseFirstLetter,\n  isPlainObject\n} from \"../support/utils\";\n\n/**\n * This class provides methods to transform incoming data from GraphQL in to a format Vuex-ORM understands and\n * vice versa.\n */\nexport default class Transformer {\n  /**\n   * Transforms outgoing data. Use for variables param.\n   *\n   * Omits relations and some other fields.\n   *\n   * @param model\n   * @param {Data} data\n   * @param {Array<String>} whitelist of fields\n   * @returns {Data}\n   */\n  public static transformOutgoingData(model: Model, data: Data, whitelist?: Array<String>): Data {\n    const context = Context.getInstance();\n    const relations: Map<string, Field> = model.getRelations();\n    const returnValue: Data = {};\n\n    Object.keys(data).forEach(key => {\n      const value = data[key];\n\n      // Always add fields on the whitelist. Ignore hasMany/One connections, empty fields and internal fields ($)\n      if (\n        (whitelist && whitelist.includes(key)) ||\n        ((!relations.has(key) || relations.get(key) instanceof context.components.BelongsTo) &&\n          !key.startsWith(\"$\") &&\n          value !== null &&\n          value !== undefined)\n      ) {\n        let relatedModel =\n          relations.get(key) && relations.get(key)!.parent\n            ? context.getModel(singularize(relations.get(key)!.parent!.entity), true)\n            : null;\n        if (value instanceof Array) {\n          // Either this is a hasMany field or a .attr() field which contains an array.\n          const arrayModel = context.getModel(singularize(key), true);\n\n          if (arrayModel) {\n            returnValue[key] = value.map(v => this.transformOutgoingData(arrayModel || model, v));\n          } else {\n            returnValue[key] = value;\n          }\n        } else if (typeof value === \"object\" && value.$id !== undefined) {\n          if (!relatedModel) {\n            relatedModel = context.getModel((value as ORMModel).$self().entity);\n          }\n\n          // Value is a record, transform that too\n          returnValue[key] = this.transformOutgoingData(relatedModel, value);\n        } else {\n          // In any other case just let the value be what ever it is\n          returnValue[key] = value;\n        }\n      }\n    });\n\n    return returnValue;\n  }\n\n  /**\n   * Transforms a set of incoming data to the format vuex-orm requires.\n   *\n   * @param {Data | Array<Data>} data\n   * @param model\n   * @param mutation required to transform something like `disableUserAddress` to the actual model name.\n   * @param {boolean} recursiveCall\n   * @returns {Data}\n   */\n  public static transformIncomingData(\n    data: Data | Array<Data>,\n    model: Model,\n    mutation: boolean = false,\n    recursiveCall: boolean = false\n  ): Data {\n    let result: Data = {};\n    const context = Context.getInstance();\n\n    if (!recursiveCall) {\n      context.logger.group(\"Transforming incoming data\");\n      context.logger.log(\"Raw data:\", data);\n    }\n\n    if (Array.isArray(data)) {\n      result = data.map((d: any) => this.transformIncomingData(d, model, mutation, true));\n    } else {\n      Object.keys(data).forEach(key => {\n        if (key in data) {\n          if (isPlainObject(data[key])) {\n            const localModel: Model = context.getModel(key, true) || model;\n\n            if (data[key].nodes && context.connectionQueryMode === \"nodes\") {\n              result[pluralize(key)] = this.transformIncomingData(\n                data[key].nodes,\n                localModel,\n                mutation,\n                true\n              );\n            } else if (data[key].edges && context.connectionQueryMode === \"edges\") {\n              result[pluralize(key)] = this.transformIncomingData(\n                data[key].edges,\n                localModel,\n                mutation,\n                true\n              );\n            } else if (data[\"node\"] && context.connectionQueryMode === \"edges\") {\n              result = this.transformIncomingData(data[\"node\"], localModel, mutation, true);\n            } else {\n              let newKey = key;\n\n              if (mutation && !recursiveCall) {\n                newKey = data[key].nodes ? localModel.pluralName : localModel.singularName;\n                newKey = downcaseFirstLetter(newKey);\n              }\n\n              result[newKey] = this.transformIncomingData(data[key], localModel, mutation, true);\n            }\n          } else if (Model.isFieldNumber(model.fields.get(key))) {\n            result[key] = parseFloat(data[key]);\n          } else if (key.endsWith(\"Type\") && model.isTypeFieldOfPolymorphicRelation(key)) {\n            result[key] = pluralize(downcaseFirstLetter(data[key]));\n          } else {\n            result[key] = data[key];\n          }\n        }\n      });\n    }\n\n    if (!recursiveCall) {\n      context.logger.log(\"Transformed data:\", result);\n      context.logger.groupEnd();\n    } else {\n      result[\"$isPersisted\"] = true;\n    }\n\n    // Make sure this is really a plain JS object. We had some issues in testing here.\n    return { ...result };\n  }\n}\n","// import { ApolloClient, FetchPolicy } from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// import { HttpLink } from \"apollo-link-http\";\n// import { ApolloLink } from \"apollo-link\";\nimport Context from \"../common/context\";\nimport { Arguments, Data } from \"../support/interfaces\";\nimport Transformer from \"./transformer\";\nimport Model from \"../orm/model\";\n// import gql from \"graphql-tag\";\nimport { prettify } from \"../support/utils\";\n\n/**\n * This class takes care of the communication with the graphql endpoint by leveraging the awesome apollo-client lib.\n */\nexport default class Apollo {\n  /**\n   * The http link instance to use.\n   * @type {HttpLink}\n   */\n  // private readonly httpLink: any;\n\n  /**\n   * The ApolloClient instance\n   * @type {ApolloClient}\n   */\n  private readonly apolloClient: any;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    const context = Context.getInstance();\n\n    // This allows the test suite to pass a custom link\n    // if (context.options.link) {\n    //   this.httpLink = context.options.link;\n    // } else {\n    //   /* istanbul ignore next */\n    //   this.httpLink = new HttpLink({\n    //     uri: context.options.url ? context.options.url : \"/graphql\",\n    //     credentials: context.options.credentials ? context.options.credentials : \"same-origin\",\n    //     useGETForQueries: Boolean(context.options.useGETForQueries)\n    //   });\n    // }\n\n    // this.apolloClient = new ApolloClient({\n    //   link: this.httpLink,\n    //   cache: new InMemoryCache(),\n    //   connectToDevTools: context.debugMode\n    // });\n\n    this.apolloClient = context.options.apolloClient;\n    this.apolloClient.prettify = prettify;\n  }\n\n  /**\n   * Sends a request to the GraphQL API via apollo\n   * @param model\n   * @param {any} query The query to send (result from gql())\n   * @param {Arguments} variables Optional. The variables to send with the query\n   * @param {boolean} mutation Optional. If this is a mutation (true) or a query (false, default)\n   * @param {boolean} bypassCache If true the query will be send to the server without using the cache. For queries only\n   * @returns {Promise<Data>} The new records\n   */\n  public async request(\n    model: Model,\n    query: any,\n    variables?: Arguments,\n    mutation: boolean = false,\n    bypassCache: boolean = false\n  ): Promise<Data> {\n    const fetchPolicy = bypassCache ? \"network-only\" : \"cache-first\";\n    Context.getInstance().logger.logQuery(query, variables, fetchPolicy);\n\n    const context = { headers: Apollo.getHeaders() };\n\n    let response;\n    if (mutation) {\n      response = await this.apolloClient.mutate({ mutation: query, variables, context });\n    } else {\n      response = await this.apolloClient.query({ query, variables, fetchPolicy, context });\n    }\n\n    // Transform incoming data into something useful\n    return Transformer.transformIncomingData(response.data as Data, model, mutation);\n  }\n\n  public async simpleQuery(\n    query: string,\n    variables: Arguments,\n    bypassCache: boolean = false,\n    context?: Data\n  ): Promise<any> {\n    const fetchPolicy = bypassCache ? \"network-only\" : \"cache-first\";\n    return this.apolloClient.query({\n      query: query,\n      variables,\n      fetchPolicy,\n      context: { headers: Apollo.getHeaders() }\n    });\n  }\n\n  public async simpleMutation(query: string, variables: Arguments, context?: Data): Promise<any> {\n    return this.apolloClient.mutate({\n      mutation: query,\n      variables,\n      context: { headers: Apollo.getHeaders() }\n    });\n  }\n\n  private static getHeaders() {\n    const context = Context.getInstance();\n\n    let headers: any = context.options.headers ? context.options.headers : {};\n\n    if (typeof headers === \"function\") {\n      headers = headers(context);\n    }\n\n    return headers;\n  }\n}\n","import {\n  GraphQLField,\n  GraphQLSchema,\n  GraphQLType,\n  GraphQLTypeDefinition\n} from \"../support/interfaces\";\nimport { upcaseFirstLetter } from \"../support/utils\";\n\nexport default class Schema {\n  private schema: GraphQLSchema;\n  private types: Map<string, GraphQLType>;\n  private mutations: Map<string, GraphQLField>;\n  private queries: Map<string, GraphQLField>;\n\n  public constructor(schema: GraphQLSchema) {\n    this.schema = schema;\n    this.types = new Map<string, GraphQLType>();\n    this.mutations = new Map<string, GraphQLField>();\n    this.queries = new Map<string, GraphQLField>();\n\n    this.schema.types.forEach((t: GraphQLType) => this.types.set(t.name, t));\n\n    this.getType(\"Query\")!.fields!.forEach(f => this.queries.set(f.name, f));\n    this.getType(\"Mutation\")!.fields!.forEach(f => this.mutations.set(f.name, f));\n  }\n\n  public determineQueryMode(): string {\n    let connection: GraphQLType | null = null;\n\n    this.queries.forEach(query => {\n      const typeName = Schema.getTypeNameOfField(query);\n      if (typeName.endsWith(\"TypeConnection\")) {\n        connection = this.getType(typeName);\n        return false; // break\n      }\n      return true;\n    });\n\n    /* istanbul ignore next */\n    if (!connection) {\n      throw new Error(\n        \"Can't determine the connection mode due to the fact that here are no connection types in the schema. Please set the connectionQueryMode via Vuex-ORM-GraphQL options!\"\n      );\n    }\n\n    if (connection!.fields!.find(f => f.name === \"nodes\")) {\n      return \"nodes\";\n    } else if (connection!.fields!.find(f => f.name === \"edges\")) {\n      return \"edges\";\n    } else {\n      return \"plain\";\n    }\n  }\n\n  public getType(name: string, allowNull: boolean = false): GraphQLType | null {\n    name = upcaseFirstLetter(name);\n    const type = this.types.get(name);\n\n    if (!allowNull && !type) {\n      throw new Error(`Couldn't find Type of name ${name} in the GraphQL Schema.`);\n    }\n\n    return type || null;\n  }\n\n  public getMutation(name: string, allowNull: boolean = false): GraphQLField | null {\n    const mutation = this.mutations.get(name);\n\n    /* istanbul ignore next */\n    if (!allowNull && !mutation) {\n      throw new Error(`Couldn't find Mutation of name ${name} in the GraphQL Schema.`);\n    }\n\n    return mutation || null;\n  }\n\n  public getQuery(name: string, allowNull: boolean = false): GraphQLField | null {\n    const query = this.queries.get(name);\n\n    /* istanbul ignore next */\n    if (!allowNull && !query) {\n      throw new Error(`Couldn't find Query of name ${name} in the GraphQL Schema.`);\n    }\n\n    return query || null;\n  }\n\n  static returnsConnection(field: GraphQLField): boolean {\n    return Schema.getTypeNameOfField(field).endsWith(\"TypeConnection\");\n  }\n\n  static getRealType(type: GraphQLTypeDefinition): GraphQLTypeDefinition {\n    if (type.kind === \"NON_NULL\") {\n      return this.getRealType(type.ofType);\n    } else {\n      return type;\n    }\n  }\n\n  static getTypeNameOfField(field: GraphQLField): string {\n    const type = this.getRealType(field.type);\n\n    if (type.kind === \"LIST\") {\n      return `[${type.ofType.name}]`;\n    }\n\n    const name = type.name || type.ofType.name || type.ofType.ofType.name;\n\n    /* istanbul ignore next */\n    if (!name) throw new Error(`Can't find type name for field ${field.name}`);\n\n    return name;\n  }\n}\n","import Logger from \"./logger\";\nimport Model from \"../orm/model\";\nimport { Model as ORMModel } from \"@vuex-orm/core\";\nimport { Components } from \"@vuex-orm/core/lib/plugins/use\";\nimport { singularize, downcaseFirstLetter } from \"../support/utils\";\nimport Apollo from \"../graphql/apollo\";\nimport Database from \"@vuex-orm/core/lib/database/Database\";\nimport { Field, GraphQLType, Options } from \"../support/interfaces\";\nimport Schema from \"../graphql/schema\";\nimport { Mock, MockOptions } from \"../test-utils\";\n\nconst introspectionQuery = `\nquery Introspection {\n  __schema {\n    types {\n      name\n      fields(includeDeprecated: true) {\n        name\n        args {\n          name\n          type {\n            name\n            kind\n\n            ofType {\n              kind\n\n              name\n              ofType {\n                kind\n                name\n\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n\n        type {\n          name\n          kind\n\n          ofType {\n            kind\n\n            name\n            ofType {\n              kind\n              name\n\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n\n      inputFields {\n        name\n        type {\n          name\n          kind\n\n          ofType {\n            kind\n\n            name\n            ofType {\n              kind\n              name\n\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n/**\n * Internal context of the plugin. This class contains all information, the models, database, logger and so on.\n *\n * It's a singleton class, so just call Context.getInstance() anywhere you need the context.\n */\nexport default class Context {\n  /**\n   * Contains the instance for the singleton pattern.\n   * @type {Context}\n   */\n  public static instance: Context;\n\n  /**\n   * Components collection of Vuex-ORM\n   * @type {Components}\n   */\n  public readonly components: Components;\n\n  /**\n   * The options which have been passed to VuexOrm.install\n   * @type {Options}\n   */\n  public readonly options: Options;\n\n  /**\n   * The Vuex-ORM database\n   * @type {Database}\n   */\n  public readonly database: Database;\n\n  /**\n   * Collection of all Vuex-ORM models wrapped in a Model instance.\n   * @type {Map<any, any>}\n   */\n  public readonly models: Map<string, Model> = new Map();\n\n  /**\n   * When true, the logging is enabled.\n   * @type {boolean}\n   */\n  public readonly debugMode: boolean = false;\n\n  /**\n   * Our nice Vuex-ORM-GraphQL logger\n   * @type {Logger}\n   */\n  public readonly logger: Logger;\n\n  /**\n   * Instance of Apollo which cares about the communication with the graphql endpoint.\n   * @type {Apollo}\n   */\n  public apollo!: Apollo;\n\n  /**\n   * The graphql schema. Is null until the first request.\n   * @type {Schema}\n   */\n  public schema: Schema | undefined;\n\n  /**\n   * Tells if the schema is already loaded or the loading is currently processed.\n   * @type {boolean}\n   */\n  private schemaWillBeLoaded: Promise<Schema> | undefined;\n\n  /**\n   * Defines how to query connections. 'auto' | 'nodes' | 'edges' | 'plain'\n   */\n  public connectionQueryMode: string = \"auto\";\n\n  /**\n   * Container for the global mocks.\n   * @type {Object}\n   */\n  private globalMocks: { [key: string]: Array<Mock> } = {};\n\n  /**\n   * Private constructor, called by the setup method\n   *\n   * @constructor\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   */\n  private constructor(components: Components, options: Options) {\n    this.components = components;\n    this.options = options;\n\n    this.database = options.database;\n    this.debugMode = Boolean(options.debug);\n    this.logger = new Logger(this.debugMode);\n\n    /* istanbul ignore next */\n    if (!options.database) {\n      throw new Error(\"database param is required to initialize vuex-orm-graphql!\");\n    }\n  }\n\n  /**\n   * Get the singleton instance of the context.\n   * @returns {Context}\n   */\n  public static getInstance(): Context {\n    return this.instance;\n  }\n\n  /**\n   * This is called only once and creates a new instance of the Context.\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   * @returns {Context}\n   */\n  public static setup(components: Components, options: Options): Context {\n    this.instance = new Context(components, options);\n\n    this.instance.apollo = new Apollo();\n    this.instance.collectModels();\n\n    this.instance.logger.group(\"Context setup\");\n    this.instance.logger.log(\"components\", this.instance.components);\n    this.instance.logger.log(\"options\", this.instance.options);\n    this.instance.logger.log(\"database\", this.instance.database);\n    this.instance.logger.log(\"models\", this.instance.models);\n    this.instance.logger.groupEnd();\n\n    return this.instance;\n  }\n\n  public async loadSchema(): Promise<Schema> {\n    if (!this.schemaWillBeLoaded) {\n      this.schemaWillBeLoaded = new Promise(async (resolve, reject) => {\n        this.logger.log(\"Fetching GraphQL Schema initially ...\");\n\n        if (this.options.connectionQueryMode) {\n          this.connectionQueryMode = this.options.connectionQueryMode;\n        } else {\n          this.connectionQueryMode = \"auto\";\n        }\n\n        // We send a custom header along with the request. This is required for our test suite to mock the schema request.\n        const context = {\n          headers: { \"X-GraphQL-Introspection-Query\": \"true\" }\n        };\n\n        const result = await this.apollo.simpleQuery(introspectionQuery, {}, true, context);\n        this.schema = new Schema(result.data.__schema);\n\n        this.logger.log(\"GraphQL Schema successful fetched\", result);\n\n        this.logger.log(\"Starting to process the schema ...\");\n        this.processSchema();\n        this.logger.log(\"Schema procession done!\");\n\n        resolve(this.schema);\n      });\n    }\n\n    return this.schemaWillBeLoaded;\n  }\n\n  public loadSchemaSync(result: any) {\n    this.logger.log(\"loadSchemaSync\");\n\n    if (this.options.connectionQueryMode) {\n      this.connectionQueryMode = this.options.connectionQueryMode;\n    } else {\n      this.connectionQueryMode = \"auto\";\n    }\n    this.schema = new Schema(result.data.__schema);\n    this.logger.log(\"GraphQL Schema successful fetched\", result);\n\n    this.logger.log(\"Starting to process the schema ...\");\n    this.processSchema();\n    this.logger.log(\"Schema procession done!\");\n\n    this.schemaWillBeLoaded = Promise.resolve(this.schema);\n  }\n\n  public processSchema() {\n    this.models.forEach((model: Model) => {\n      let type: GraphQLType;\n\n      try {\n        type = this.schema!.getType(model.singularName)!;\n      } catch (error) {\n        this.logger.warn(`Ignoring entity ${model.singularName} because it's not in the schema.`);\n        return;\n      }\n\n      model.fields.forEach((field: Field, fieldName: string) => {\n        if (!type.fields!.find(f => f.name === fieldName)) {\n          this.logger.warn(\n            `Ignoring field ${model.singularName}.${fieldName} because it's not in the schema.`\n          );\n\n          // TODO: Move skipFields to the model\n          model.baseModel.skipFields = model.baseModel.skipFields ? model.baseModel.skipFields : [];\n          if (!model.baseModel.skipFields.includes(fieldName)) {\n            model.baseModel.skipFields.push(fieldName);\n          }\n        }\n      });\n    });\n\n    if (this.connectionQueryMode === \"auto\") {\n      this.connectionQueryMode = this.schema!.determineQueryMode();\n      this.logger.log(\n        `Connection Query Mode is ${this.connectionQueryMode} by automatic detection`\n      );\n    } else {\n      this.logger.log(`Connection Query Mode is ${this.connectionQueryMode} by config`);\n    }\n  }\n\n  /**\n   * Returns a model from the model collection by it's name\n   *\n   * @param {Model|string} model A Model instance, a singular or plural name of the model\n   * @param {boolean} allowNull When true this method returns null instead of throwing an exception when no model was\n   *                            found. Default is false\n   * @returns {Model}\n   */\n  public getModel(model: Model | string, allowNull: boolean = false): Model {\n    if (typeof model === \"string\") {\n      const name: string = singularize(downcaseFirstLetter(model));\n      model = this.models.get(name) as Model;\n      if (!allowNull && !model) throw new Error(`No such model ${name}!`);\n    }\n\n    return model;\n  }\n\n  /**\n   * Will add a mock for simple mutations or queries. These are model unrelated and have to be\n   * handled  globally.\n   *\n   * @param {Mock} mock - Mock config.\n   */\n  // public addGlobalMock(mock: Mock): boolean {\n  //   if (this.findGlobalMock(mock.action, mock.options)) return false;\n  //   if (!this.globalMocks[mock.action]) this.globalMocks[mock.action] = [];\n  //\n  //   this.globalMocks[mock.action].push(mock);\n  //   return true;\n  // }\n\n  /**\n   * Finds a global mock for the given action and options.\n   *\n   * @param {string} action - Name of the action like 'simpleQuery' or 'simpleMutation'.\n   * @param {MockOptions} options - MockOptions like { name: 'example' }.\n   * @returns {Mock | null} null when no mock was found.\n   */\n  // public findGlobalMock(action: string, options: MockOptions | undefined): Mock | null {\n  //   if (this.globalMocks[action]) {\n  //     return (\n  //       this.globalMocks[action].find(m => {\n  //         if (!m.options || !options) return true;\n  //\n  //         const relevantOptions = pick(options, Object.keys(m.options));\n  //         return isEqual(relevantOptions, m.options || {});\n  //       }) || null\n  //     );\n  //   }\n  //\n  //   return null;\n  // }\n\n  /**\n   * Hook to be called by simpleMutation and simpleQuery actions in order to get the global mock\n   * returnValue.\n   *\n   * @param {string} action - Name of the action like 'simpleQuery' or 'simpleMutation'.\n   * @param {MockOptions} options - MockOptions.\n   * @returns {any} null when no mock was found.\n   */\n  // public globalMockHook(action: string, options: MockOptions): any {\n  //   let returnValue: null | { [key: string]: any } = null;\n  //   const mock = this.findGlobalMock(action, options);\n  //\n  //   if (mock) {\n  //     if (mock.returnValue instanceof Function) {\n  //       returnValue = mock.returnValue();\n  //     } else {\n  //       returnValue = mock.returnValue || null;\n  //     }\n  //   }\n  //\n  //   return returnValue;\n  // }\n\n  /**\n   * Wraps all Vuex-ORM entities in a Model object and saves them into this.models\n   */\n  private collectModels() {\n    this.database.entities.forEach((entity: any) => {\n      const model: Model = new Model(entity.model as ORMModel);\n      this.models.set(model.singularName, model);\n      Model.augment(model);\n    });\n  }\n}\n","import { Relation } from \"@vuex-orm/core\";\nimport Model from \"../orm/model\";\nimport { Arguments, Field, GraphQLField } from \"../support/interfaces\";\nimport { isPlainObject, takeWhile, upcaseFirstLetter } from \"../support/utils\";\n// import gql from \"graphql-tag\";\nimport Context from \"../common/context\";\nimport Schema from \"./schema\";\n\n/**\n * Contains all logic to build GraphQL queries/mutations.\n */\nexport default class QueryBuilder {\n  /**\n   * Builds a field for the GraphQL query and a specific model\n   *\n   * @param {Model|string} model The model to use\n   * @param {boolean} multiple Determines whether plural/nodes syntax or singular syntax is used.\n   * @param {Arguments} args The args that will be passed to the query field ( user(role: $role) )\n   * @param {Array<Model>} path The relations in this list are ignored (while traversing relations).\n   *                                    Mainly for recursion\n   * @param {string} name Optional name of the field. If not provided, this will be the model name\n   * @param filter\n   * @param {boolean} allowIdFields Optional. Determines if id fields will be ignored for the argument generation.\n   *                                See buildArguments\n   * @returns {string}\n   *\n   * @todo Do we need the allowIdFields param?\n   */\n  public static buildField(\n    model: Model | string,\n    multiple: boolean = true,\n    args?: Arguments,\n    path: Array<string> = [],\n    name?: string,\n    filter: boolean = false,\n    allowIdFields: boolean = false\n  ): string {\n    const context = Context.getInstance();\n    model = context.getModel(model);\n\n    name = name ? name : model.pluralName;\n    const field = context.schema!.getMutation(name, true) || context.schema!.getQuery(name, true);\n\n    let params: string = this.buildArguments(model, args, false, filter, allowIdFields, field);\n    path = path.length === 0 ? [model.singularName] : path;\n\n    const fields = `\n      ${model.getQueryFields().join(\" \")}\n      ${this.buildRelationsQuery(model, path)}\n    `;\n\n    if (multiple) {\n      const header: string = `${name}${params}`;\n\n      if (context.connectionQueryMode === \"nodes\") {\n        return `\n          ${header} {\n            nodes {\n              ${fields}\n            }\n          }\n        `;\n      } else if (context.connectionQueryMode === \"edges\") {\n        return `\n          ${header} {\n            edges {\n              node {\n                ${fields}\n              }\n            }\n          }\n        `;\n      } else {\n        return `\n          ${header} {\n            ${fields}\n          }\n        `;\n      }\n    } else {\n      return `\n        ${name ? name : model.singularName}${params} {\n          ${fields}\n        }\n      `;\n    }\n  }\n\n  /**\n   * Generates a query.\n   * Currently only one root field for the query is possible.\n   * @param {string} type 'mutation' or 'query'\n   * @param {Model | string} model The model this query or mutation affects. This mainly determines the query fields.\n   * @param {string} name Optional name of the query/mutation. Will overwrite the name from the model.\n   * @param {Arguments} args Arguments for the query\n   * @param {boolean} multiple Determines if the root query field is a connection or not (will be passed to buildField)\n   * @param {boolean} filter When true the query arguments are passed via a filter object.\n   * @returns {any} Whatever gql() returns\n   */\n  public static buildQuery(\n    type: string,\n    model: Model | string,\n    name?: string,\n    args?: Arguments,\n    multiple?: boolean,\n    filter?: boolean\n  ) {\n    const context = Context.getInstance();\n\n    model = context.getModel(model);\n    args = (args ? { ...args } : {}) as Arguments;\n\n    Object.keys(args).forEach((key: string) => {\n      if (args && args[key] && isPlainObject(args[key])) {\n        args[key] = { __type: upcaseFirstLetter(key) };\n      }\n    });\n\n    // multiple\n    multiple = multiple === undefined ? !args[\"id\"] : multiple;\n\n    // name\n    if (!name) name = multiple ? model.pluralName : model.singularName;\n\n    // field\n    const field = context.schema!.getMutation(name, true) || context.schema!.getQuery(name, true);\n\n    // build query\n    const query: string =\n      `${type} ${upcaseFirstLetter(name)}${this.buildArguments(\n        model,\n        args,\n        true,\n        filter,\n        true,\n        field\n      )} {\\n` +\n      `  ${this.buildField(model, multiple, args, [], name, filter, true)}\\n` +\n      `}`;\n\n    return query;\n  }\n\n  /**\n   * Generates the arguments string for a graphql query based on a given map.\n   *\n   * There are three types of arguments:\n   *\n   * 1) Signatures with primitive types (signature = true)\n   *      => 'mutation createUser($name: String!)'\n   *\n   * 2) Signatures with object types (signature = true, args = { user: { __type: 'User' }})\n   *      => 'mutation createUser($user: UserInput!)'\n   *\n   * 3) Fields with variables (signature = false)\n   *      => 'user(id: $id)'\n   *\n   * 4) Filter fields with variables (signature = false, filter = true)\n   *      => 'users(filter: { active: $active })'\n   *\n   * @param model\n   * @param {Arguments | undefined} args\n   * @param {boolean} signature When true, then this method generates a query signature instead of key/value pairs\n   * @param filter\n   * @param {boolean} allowIdFields If true, ID fields will be included in the arguments list\n   * @param {GraphQLField} field Optional. The GraphQL mutation or query field\n   * @returns {String}\n   */\n  public static buildArguments(\n    model: Model,\n    args?: Arguments,\n    signature: boolean = false,\n    filter: boolean = false,\n    allowIdFields: boolean = true,\n    field: GraphQLField | null = null\n  ): string {\n    if (args === undefined) return \"\";\n\n    let returnValue: string = \"\";\n    let first: boolean = true;\n\n    if (args) {\n      Object.keys(args).forEach((key: string) => {\n        let value: any = args[key];\n\n        const isForeignKey = model.skipField(key);\n        const skipFieldDueId = (key === \"id\" || isForeignKey) && !allowIdFields;\n\n        let schemaField: GraphQLField | undefined = this.findSchemaFieldForArgument(\n          key,\n          field,\n          model,\n          filter\n        );\n\n        const isConnectionField =\n          schemaField && Schema.getTypeNameOfField(schemaField).endsWith(\"TypeConnection\");\n\n        // Ignore null fields, ids and connections\n        if (value && !skipFieldDueId && !isConnectionField) {\n          let typeOrValue: any = \"\";\n\n          if (signature) {\n            if (isPlainObject(value) && value.__type) {\n              // Case 2 (User!)\n              typeOrValue = value.__type + \"Input!\";\n            } else if (Array.isArray(value) && field) {\n              const arg = QueryBuilder.findSchemaFieldForArgument(key, field, model, filter);\n\n              /* istanbul ignore next */\n              if (!arg) {\n                throw new Error(\n                  `The argument ${key} is of type array but it's not possible to determine the type, because it's not in the field ${\n                    field.name\n                  }`\n                );\n              }\n\n              typeOrValue = Schema.getTypeNameOfField(arg) + \"!\";\n            } else if (schemaField && Schema.getTypeNameOfField(schemaField)) {\n              // Case 1, 3 and 4\n              typeOrValue = Schema.getTypeNameOfField(schemaField) + \"!\";\n            } else if (key === \"id\" || isForeignKey) {\n              // Case 1 (ID!)\n              typeOrValue = \"ID!\";\n            } else {\n              // Case 1 (String!)\n              typeOrValue = this.determineAttributeType(model, key, value, field || undefined);\n              typeOrValue = typeOrValue + \"!\";\n            }\n          } else {\n            // Case 3 or 4\n            typeOrValue = `$${key}`;\n          }\n\n          returnValue = `${returnValue}${first ? \"\" : \", \"}${(signature ? \"$\" : \"\") +\n            key}: ${typeOrValue}`;\n\n          first = false;\n        }\n      });\n\n      if (!first) {\n        if (!signature && filter) returnValue = `filter: { ${returnValue} }`;\n        returnValue = `(${returnValue})`;\n      }\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Determines the GraphQL primitive type of a field in the variables hash by the field type or (when\n   * the field type is generic attribute) by the variable type.\n   * @param {Model} model\n   * @param {string} key\n   * @param {string} value\n   * @param {GraphQLField} query Pass when we have to detect the type of an argument\n   * @returns {string}\n   */\n  public static determineAttributeType(\n    model: Model,\n    key: string,\n    value: any,\n    query?: GraphQLField\n  ): string {\n    const context: Context = Context.getInstance();\n    const field: undefined | Field = model.fields.get(key);\n    let schemaField: undefined | GraphQLField;\n\n    if (query) {\n      schemaField = query.args.find(f => f.name === key);\n\n      if (!schemaField) {\n        const filterField = query.args.find(f => f.name === \"filter\");\n\n        if (filterField) {\n          schemaField = this.findSchemaFieldForArgument(key, null, model, true);\n        }\n      }\n    } else {\n      schemaField = context.schema!.getType(model.singularName)!.fields!.find(f => f.name === key);\n    }\n\n    if (schemaField && Schema.getTypeNameOfField(schemaField)) {\n      return Schema.getTypeNameOfField(schemaField);\n    } else {\n      if (field instanceof context.components.String) {\n        return \"String\";\n      } else if (field && field instanceof context.components.Number) {\n        return \"Int\";\n      } else if (field && field instanceof context.components.Boolean) {\n        return \"Boolean\";\n      } else {\n        if (typeof value === \"number\") return \"Int\";\n        if (typeof value === \"string\") return \"String\";\n        if (typeof value === \"boolean\") return \"Boolean\";\n\n        throw new Error(\n          `Can't find suitable graphql type for field '${model.singularName}.${key}'.`\n        );\n      }\n    }\n  }\n\n  private static findSchemaFieldForArgument(\n    name: String,\n    field: GraphQLField | null,\n    model: Model,\n    isFilter: boolean\n  ): GraphQLField | undefined {\n    const schema = Context.getInstance().schema!;\n    let schemaField: GraphQLField | undefined;\n\n    if (field) {\n      schemaField = field.args.find(f => f.name === name);\n      if (schemaField) return schemaField;\n    }\n\n    // We try to find the FilterType or at least the Type this query belongs to.\n    const type = schema.getType(model.singularName + (isFilter ? \"Filter\" : \"\"), true);\n\n    // Next we try to find the field from the type\n    schemaField = type\n      ? (isFilter ? type.inputFields! : type.fields!).find(f => f.name === name)\n      : undefined;\n\n    // Warn before we return null\n    if (!schemaField) {\n      Context.getInstance().logger.warn(\n        `Couldn't find the argument with name ${name} for the mutation/query ${\n          field ? field.name : \"(?)\"\n        }`\n      );\n    }\n\n    return schemaField;\n  }\n\n  /**\n   * Generates the fields for all related models.\n   *\n   * @param {Model} model\n   * @param {Array<Model>} path\n   * @returns {string}\n   */\n  static buildRelationsQuery(model: null | Model, path: Array<string> = []): string {\n    if (model === null) return \"\";\n\n    const context = Context.getInstance();\n    const relationQueries: Array<string> = [];\n\n    model.getRelations().forEach((field: Field, name: string) => {\n      let relatedModel: Model;\n      let fieldAsRelation: Relation = field as Relation;\n\n      if (\n        fieldAsRelation instanceof context.components.BelongsToMany ||\n        fieldAsRelation instanceof context.components.HasMany ||\n        fieldAsRelation instanceof context.components.HasManyThrough ||\n        fieldAsRelation instanceof context.components.MorphedByMany ||\n        fieldAsRelation instanceof context.components.MorphMany ||\n        fieldAsRelation instanceof context.components.MorphOne ||\n        fieldAsRelation instanceof context.components.MorphToMany ||\n        fieldAsRelation instanceof context.components.HasOne\n      ) {\n        relatedModel = context.getModel(fieldAsRelation.related.entity);\n      } else if (\n        fieldAsRelation instanceof context.components.BelongsTo ||\n        fieldAsRelation instanceof context.components.HasManyBy\n      ) {\n        relatedModel = context.getModel(fieldAsRelation.parent.entity);\n      } else if (fieldAsRelation instanceof context.components.MorphTo) {\n        relatedModel = context.getModel(fieldAsRelation.type);\n\n        /* istanbul ignore next */\n      } else {\n        relatedModel = context.getModel(name);\n\n        context.logger.log(\n          \"WARNING: unknown field type. Fallback to attribute name\",\n          fieldAsRelation\n        );\n      }\n\n      // We will ignore the field, when it's already in the path. Means: When it's already queried. However there are\n      // cases where the model will have a relationship to itself. For example a nested category strucure where the\n      // category model has a parent: belongsTo(Category). So we also check if the model references itself. If this is\n      // the case, we allow the nesting up to 5 times.\n      const referencesItSelf = takeWhile(\n        path.slice(0).reverse(),\n        (p: string) => p === relatedModel.singularName\n      ).length;\n      const ignore = referencesItSelf\n        ? referencesItSelf > 5\n        : path.includes(relatedModel.singularName);\n\n      // console.log(`-----> Will ${ignore ? '' : 'not'} ignore ${model.singularName}.${name}, path: ${path.join('.')}`);\n\n      if (model.shouldEagerLoadRelation(name, field, relatedModel) && !ignore) {\n        const newPath = path.slice(0);\n        newPath.push(relatedModel.singularName);\n\n        relationQueries.push(\n          this.buildField(relatedModel, Model.isConnection(field), undefined, newPath, name, false)\n        );\n      }\n    });\n\n    return relationQueries.join(\"\\n\");\n  }\n}\n","import { Data, DispatchFunction } from '../support/interfaces';\nimport Context from '../common/context';\n\n/**\n * Provides some helper methods to interact with the Vuex-ORM store\n */\nexport class Store {\n  /**\n   * Inserts incoming data into the store. Existing data will be updated.\n   *\n   * @param {Data} data New data to insert/update\n   * @param {Function} dispatch Vuex Dispatch method for the model\n   * @return {Promise<Data>} Inserted data as hash\n   */\n  public static async insertData (data: Data, dispatch: DispatchFunction): Promise<Data> {\n    let insertedData: Data = {};\n\n    await Promise.all(Object.keys(data).map(async (key) => {\n      const value = data[key];\n      Context.getInstance().logger.log('Inserting records', value);\n      const newData = await dispatch('insertOrUpdate', { data: value });\n\n      Object.keys(newData).forEach((dataKey) => {\n        if (!insertedData[dataKey]) insertedData[dataKey] = [];\n        insertedData[dataKey] = insertedData[dataKey].concat(newData[dataKey]);\n      });\n    }));\n\n    return insertedData;\n  }\n}\n","import Model from \"../orm/model\";\nimport { upcaseFirstLetter } from \"../support/utils\";\n\n/**\n * Generic name generator for mutations and queries. In the future these methods may be influenced by the configuration.\n */\nexport default class NameGenerator {\n  public static getNameForPersist(model: Model) {\n    return this.getCRUDName(\"create\", model);\n  }\n\n  public static getNameForPush(model: Model) {\n    return this.getCRUDName(\"update\", model);\n  }\n\n  public static getNameForDestroy(model: Model) {\n    return this.getCRUDName(\"delete\", model);\n  }\n\n  public static getNameForFetch(model: Model, plural: boolean = false) {\n    return plural ? model.pluralName : model.singularName;\n  }\n\n  /**\n   * Internal helper to keep the code DRY. Just generates a name by leveraging the models singular name.\n   * @param {string} action Name of the action like 'create'\n   * @param {Model} model\n   * @returns {string} For example 'createBlogPost'\n   */\n  private static getCRUDName(action: string, model: Model) {\n    return `${action}${upcaseFirstLetter(model.singularName)}`;\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport { Arguments, Data, DispatchFunction } from \"../support/interfaces\";\nimport Model from \"../orm/model\";\nimport RootState from \"@vuex-orm/core/lib/modules/contracts/RootState\";\nimport Transformer from \"../graphql/transformer\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Schema from \"../graphql/schema\";\nimport { singularize } from \"../support/utils\";\n\n/**\n * Base class for all Vuex actions. Contains some utility and convenience methods.\n */\nexport default class Action {\n  /**\n   * Sends a mutation.\n   *\n   * @param {string} name Name of the mutation like 'createUser'\n   * @param {Data | undefined} variables Variables to send with the mutation\n   * @param {Function} dispatch Vuex Dispatch method for the model\n   * @param {Model} model The model this mutation affects.\n   * @param {boolean} multiple Tells if we're requesting a single record or multiple.\n   * @returns {Promise<any>}\n   */\n  protected static async mutation(\n    name: string,\n    variables: Data | undefined,\n    dispatch: DispatchFunction,\n    model: Model\n  ): Promise<any> {\n    if (variables) {\n      const context: Context = Context.getInstance();\n      const schema: Schema = context.schema || (await context.loadSchema());\n\n      const multiple: boolean = Schema.returnsConnection(schema.getMutation(name)!);\n      const query = QueryBuilder.buildQuery(\"mutation\", model, name, variables, multiple);\n\n      // Send GraphQL Mutation\n      let newData = await Context.getInstance().apollo.request(model, query, variables, true);\n\n      // When this was not a destroy action, we get new data, which we should insert in the store\n      if (name !== NameGenerator.getNameForDestroy(model)) {\n        newData = newData[Object.keys(newData)[0]];\n\n        // IDs as String cause terrible issues, so we convert them to integers.\n        newData.id = parseInt(newData.id, 10);\n\n        const insertedData: Data = await Store.insertData(\n          { [model.pluralName]: newData },\n          dispatch\n        );\n\n        // Try to find the record to return\n        const records = insertedData[model.pluralName];\n        const newRecord = records[records.length - 1];\n        if (newRecord) {\n          return newRecord;\n        } else {\n          Context.getInstance().logger.log(\n            \"Couldn't find the record of type '\",\n            model.pluralName,\n            \"' within\",\n            insertedData,\n            \". Falling back to find()\"\n          );\n          return model.baseModel.query().last();\n        }\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Convenience method to get the model from the state.\n   * @param {RootState} state Vuex state\n   * @returns {Model}\n   */\n  static getModelFromState(state: RootState): Model {\n    return Context.getInstance().getModel(state.$name);\n  }\n\n  /**\n   * Makes sure args is a hash.\n   *\n   * @param {Arguments|undefined} args\n   * @param {any} id When not undefined, it's added to the args\n   * @returns {Arguments}\n   */\n  static prepareArgs(args?: Arguments, id?: any): Arguments {\n    args = args || {};\n    if (id) args[\"id\"] = id;\n\n    return args;\n  }\n\n  /**\n   * Adds the record itself to the args and sends it through transformOutgoingData. Key is named by the singular name\n   * of the model.\n   *\n   * @param {Arguments} args\n   * @param {Model} model\n   * @param {Data} data\n   * @returns {Arguments}\n   */\n  static addRecordToArgs(args: Arguments, model: Model, data: Data): Arguments {\n    args[model.singularName] = Transformer.transformOutgoingData(model, data);\n    return args;\n  }\n\n  /**\n   * Transforms each field of the args which contains a model.\n   * @param {Arguments} args\n   * @returns {Arguments}\n   */\n  protected static transformArgs(args: Arguments): Arguments {\n    const context = Context.getInstance();\n\n    Object.keys(args).forEach((key: string) => {\n      const value: any = args[key];\n\n      if (value instanceof context.components.Model) {\n        const model = context.getModel(singularize(value.$self().entity));\n        const transformedValue = Transformer.transformOutgoingData(model, value);\n        context.logger.log(\n          \"A\",\n          key,\n          \"model was found within the variables and will be transformed from\",\n          value,\n          \"to\",\n          transformedValue\n        );\n        args[key] = transformedValue;\n      }\n    });\n\n    return args;\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Destroy action for sending a delete mutation. Will be used for record.$destroy().\n */\nexport default class Destroy extends Action {\n  /**\n   * @param {State} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} id ID of the record to delete\n   * @returns {Promise<any>} true\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { id, args }: ActionParams\n  ): Promise<boolean> {\n    if (id) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForDestroy(model);\n\n      // const mockReturnValue = model.$mockHook(\"destroy\", { id });\n      //\n      // if (mockReturnValue) {\n      //   await Store.insertData(mockReturnValue, dispatch!);\n      //   return true;\n      // }\n\n      args = this.prepareArgs(args, id);\n\n      await Action.mutation(mutationName, args, dispatch!, model);\n      return true;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The destroy action requires the 'id' to be set\");\n    }\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport Transformer from \"../graphql/transformer\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\n\n/**\n * Fetch action for sending a query. Will be used for Model.fetch().\n */\nexport default class Fetch extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {ActionParams} params Optional params to send with the query\n   * @returns {Promise<Data>} The fetched records as hash\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    params?: ActionParams\n  ): Promise<Data> {\n    const context = Context.getInstance();\n    const model = this.getModelFromState(state!);\n\n    // const mockReturnValue = model.$mockHook(\"fetch\", {\n    //   filter: params ? params.filter || {} : {}\n    // });\n    //\n    // if (mockReturnValue) {\n    //   return Store.insertData(mockReturnValue, dispatch!);\n    // }\n\n    if (!context.schema) {\n      await context.loadSchema();\n    }\n\n    // Filter\n    const filter =\n      params && params.filter\n        ? Transformer.transformOutgoingData(model, params.filter, Object.keys(params.filter))\n        : {};\n\n    const bypassCache = params && params.bypassCache;\n\n    // When the filter contains an id, we query in singular mode\n    const multiple: boolean = !filter[\"id\"];\n    const name: string = NameGenerator.getNameForFetch(model, multiple);\n    if (params && params.beforeBuildQuery) params.beforeBuildQuery();\n    const query = QueryBuilder.buildQuery(\"query\", model, name, filter, multiple, multiple);\n    if (params && params.afterBuildQuery) params.afterBuildQuery();\n\n    // Send the request to the GraphQL API\n    const data = await context.apollo.request(model, query, filter, false, bypassCache as boolean);\n\n    // Insert incoming data into the store\n    return Store.insertData(data, dispatch!);\n  }\n}\n","import { ActionParams, Arguments, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport Schema from \"../graphql/schema\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Mutate action for sending a custom mutation. Will be used for Model.mutate() and record.$mutate().\n */\nexport default class Mutate extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} name Name of the query\n   * @param {boolean} multiple Fetch one or multiple?\n   * @param {Arguments} args Arguments for the mutation. Must contain a 'mutation' field.\n   * @returns {Promise<Data>} The new record if any\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { args, name }: ActionParams\n  ): Promise<Data> {\n    if (name) {\n      const context: Context = Context.getInstance();\n      const model = this.getModelFromState(state!);\n\n      // const mockReturnValue = model.$mockHook(\"mutate\", {\n      //   name,\n      //   args: args || {}\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return Store.insertData(mockReturnValue, dispatch!);\n      // }\n\n      const schema: Schema = context.schema || (await context.loadSchema());\n      args = this.prepareArgs(args);\n\n      // There could be anything in the args, but we have to be sure that all records are gone through\n      // transformOutgoingData()\n      this.transformArgs(args);\n\n      // Send the mutation\n      return Action.mutation(name, args, dispatch!, model);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The mutate action requires the mutation name ('mutation') to be set\");\n    }\n  }\n}\n","import Context from \"../common/context\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Model from \"../orm/model\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Persist action for sending a create mutation. Will be used for record.$persist().\n */\nexport default class Persist extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} id ID of the record to persist\n   * @returns {Promise<Data>} The saved record\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { id, args }: ActionParams\n  ): Promise<Data> {\n    if (id) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForPersist(model);\n      const oldRecord = model.getRecordWithId(id);\n\n      // const mockReturnValue = model.$mockHook(\"persist\", {\n      //   id,\n      //   args: args || {}\n      // });\n      //\n      // if (mockReturnValue) {\n      //   const newRecord = Store.insertData(mockReturnValue, dispatch!);\n      //   await this.deleteObsoleteRecord(model, newRecord, oldRecord);\n      //   return newRecord;\n      // }\n\n      // Arguments\n      args = this.prepareArgs(args);\n      this.addRecordToArgs(args, model, oldRecord);\n\n      // Send mutation\n      const newRecord = await Action.mutation(mutationName, args, dispatch!, model);\n\n      // Delete the old record if necessary\n      await this.deleteObsoleteRecord(model, newRecord, oldRecord);\n\n      return newRecord;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The persist action requires the 'id' to be set\");\n    }\n  }\n\n  /**\n   * It's very likely that the server generated different ID for this record.\n   * In this case Action.mutation has inserted a new record instead of updating the existing one.\n   *\n   * @param {Model} model\n   * @param {Data} record\n   * @returns {Promise<void>}\n   */\n  private static async deleteObsoleteRecord(model: Model, newRecord: Data, oldRecord: Data) {\n    if (newRecord && oldRecord && newRecord.id !== oldRecord.id) {\n      Context.getInstance().logger.log(\"Dropping deprecated record\", oldRecord);\n      return oldRecord.$delete();\n    }\n  }\n}\n","import { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Push action for sending a update mutation. Will be used for record.$push().\n */\nexport default class Push extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {Arguments} data New data to save\n   * @param {Arguments} args Additional arguments\n   * @returns {Promise<Data>} The updated record\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { data, args }: ActionParams\n  ): Promise<Data> {\n    if (data) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForPush(model);\n\n      // const mockReturnValue = model.$mockHook(\"push\", {\n      //   data,\n      //   args: args || {}\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return Store.insertData(mockReturnValue, dispatch!);\n      // }\n\n      // Arguments\n      args = this.prepareArgs(args, data.id);\n      this.addRecordToArgs(args, model, data);\n\n      // Send the mutation\n      return Action.mutation(mutationName, args, dispatch!, model);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The persist action requires the 'data' to be set\");\n    }\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport Transformer from \"../graphql/transformer\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Schema from \"../graphql/schema\";\n\n/**\n * Query action for sending a custom query. Will be used for Model.customQuery() and record.$customQuery.\n */\nexport default class Query extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} name Name of the query\n   * @param {boolean} multiple Fetch one or multiple?\n   * @param {object} filter Filter object (arguments)\n   * @param {boolean} bypassCache Whether to bypass the cache\n   * @returns {Promise<Data>} The fetched records as hash\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { name, filter, bypassCache }: ActionParams\n  ): Promise<Data> {\n    if (name) {\n      const context: Context = Context.getInstance();\n      const model = this.getModelFromState(state!);\n\n      // const mockReturnValue = model.$mockHook(\"query\", {\n      //   name,\n      //   filter: filter || {}\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return Store.insertData(mockReturnValue, dispatch!);\n      // }\n\n      const schema: Schema = context.schema || (await context.loadSchema());\n\n      // Filter\n      filter = filter ? Transformer.transformOutgoingData(model, filter) : {};\n\n      // Multiple?\n      const multiple: boolean = Schema.returnsConnection(schema.getQuery(name)!);\n\n      // Build query\n      const query = QueryBuilder.buildQuery(\"query\", model, name, filter, multiple, false);\n\n      // Send the request to the GraphQL API\n      const data = await context.apollo.request(\n        model,\n        query,\n        filter,\n        false,\n        bypassCache as boolean\n      );\n\n      // Insert incoming data into the store\n      return Store.insertData(data, dispatch!);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The customQuery action requires the query name ('name') to be set\");\n    }\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport { graphQlDocumentToString, parseQuery, removeSymbols } from \"../support/utils\";\n\n/**\n * SimpleQuery action for sending a model unrelated simple query.\n */\nexport default class SimpleQuery extends Action {\n  /**\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} query The query to send\n   * @param {Arguments} variables\n   * @param {boolean} bypassCache Whether to bypass the cache\n   * @returns {Promise<any>} The result\n   */\n  public static async call(\n    { dispatch }: ActionParams,\n    { query, bypassCache, variables }: ActionParams\n  ): Promise<any> {\n    const context: Context = Context.getInstance();\n\n    if (query) {\n      const parsedQuery = parseQuery(query);\n\n      // const mockReturnValue = context.globalMockHook(\"simpleQuery\", {\n      //   name: parsedQuery.definitions[0][\"name\"].value,\n      //   variables\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return mockReturnValue;\n      // }\n\n      variables = this.prepareArgs(variables);\n\n      const result = await context.apollo.simpleQuery(\n        graphQlDocumentToString(parsedQuery),\n        variables,\n        bypassCache\n      );\n\n      // remove the symbols\n      return removeSymbols(result.data);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The simpleQuery action requires the 'query' to be set\");\n    }\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport { graphQlDocumentToString, parseQuery } from \"../support/utils\";\n\n/**\n * SimpleMutation action for sending a model unrelated simple mutation.\n */\nexport default class SimpleMutation extends Action {\n  /**\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} query The query to send\n   * @param {Arguments} variables\n   * @returns {Promise<any>} The result\n   */\n  public static async call(\n    { dispatch }: ActionParams,\n    { query, variables }: ActionParams\n  ): Promise<any> {\n    const context: Context = Context.getInstance();\n\n    if (query) {\n      const parsedQuery = parseQuery(query);\n\n      // const mockReturnValue = context.globalMockHook(\"simpleMutation\", {\n      //   name: parsedQuery.definitions[0][\"name\"].value,\n      //   variables\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return mockReturnValue;\n      // }\n\n      variables = this.prepareArgs(variables);\n      const result = await context.apollo.simpleMutation(\n        graphQlDocumentToString(parsedQuery),\n        variables\n      );\n\n      // remove the symbols\n      return result.data;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The simpleMutation action requires the 'query' to be set\");\n    }\n  }\n}\n","import { PatchedModel, Options, ActionParams } from \"./support/interfaces\";\nimport Context from \"./common/context\";\nimport { Components } from \"@vuex-orm/core/lib/plugins/use\";\nimport { Destroy, Fetch, Mutate, Persist, Push } from \"./actions\";\nimport Query from \"./actions/query\";\nimport SimpleQuery from \"./actions/simple-query\";\nimport SimpleMutation from \"./actions/simple-mutation\";\nimport { isPlainObject } from \"./support/utils\";\n\n/**\n * Main class of the plugin. Setups the internal context, Vuex actions and model methods\n */\nexport default class VuexORMGraphQL {\n  /**\n   * @constructor\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   */\n  public constructor(components: Components, options: Options) {\n    Context.setup(components, options);\n    VuexORMGraphQL.setupActions();\n    VuexORMGraphQL.setupModelMethods();\n  }\n\n  /**\n   * Allow everything to read the context.\n   */\n  public getContext(): Context {\n    return Context.getInstance();\n  }\n\n  /**\n   * This method will setup following Vuex actions: fetch, persist, push, destroy, mutate\n   */\n  private static setupActions() {\n    const context = Context.getInstance();\n\n    context.components.RootActions.simpleQuery = SimpleQuery.call.bind(SimpleQuery);\n    context.components.RootActions.simpleMutation = SimpleMutation.call.bind(SimpleMutation);\n\n    context.components.Actions.fetch = Fetch.call.bind(Fetch);\n    context.components.Actions.persist = Persist.call.bind(Persist);\n    context.components.Actions.push = Push.call.bind(Push);\n    context.components.Actions.destroy = Destroy.call.bind(Destroy);\n    context.components.Actions.mutate = Mutate.call.bind(Mutate);\n    context.components.Actions.query = Query.call.bind(Query);\n  }\n\n  /**\n   * This method will setup following model methods: Model.fetch, Model.mutate, Model.customQuery, record.$mutate,\n   * record.$persist, record.$push, record.$destroy and record.$deleteAndDestroy, record.$customQuery\n   */\n  private static setupModelMethods() {\n    const context = Context.getInstance();\n\n    // Register static model convenience methods\n    (context.components.Model as typeof PatchedModel).fetch = async function(\n      filter: any,\n      bypassCache = false\n    ) {\n      let filterObj = filter;\n      if (!isPlainObject(filterObj)) {\n        filterObj = { id: filter };\n      }\n      return this.dispatch(\"fetch\", { filter: filterObj, bypassCache });\n    };\n\n    (context.components.Model as typeof PatchedModel).mutate = async function(\n      params: ActionParams\n    ) {\n      return this.dispatch(\"mutate\", params);\n    };\n\n    (context.components.Model as typeof PatchedModel).customQuery = async function({\n      name,\n      filter,\n      multiple,\n      bypassCache\n    }: ActionParams) {\n      return this.dispatch(\"query\", { name, filter, multiple, bypassCache });\n    };\n\n    // Register model convenience methods\n    const model = context.components.Model.prototype;\n\n    model.$mutate = async function({ name, args, multiple }: ActionParams) {\n      args = args || {};\n      if (!args[\"id\"]) args[\"id\"] = this.id;\n      return this.$dispatch(\"mutate\", { name, args, multiple });\n    };\n\n    model.$customQuery = async function({ name, filter, multiple, bypassCache }: ActionParams) {\n      filter = filter || {};\n      if (!filter[\"id\"]) filter[\"id\"] = this.id;\n      return this.$dispatch(\"query\", { name, filter, multiple, bypassCache });\n    };\n\n    model.$persist = async function(args: any) {\n      return this.$dispatch(\"persist\", { id: this.id, args });\n    };\n\n    model.$push = async function(args: any) {\n      return this.$dispatch(\"push\", { data: this, args });\n    };\n\n    model.$destroy = async function() {\n      return this.$dispatch(\"destroy\", { id: this.id });\n    };\n\n    model.$deleteAndDestroy = async function() {\n      await this.$delete();\n      return this.$destroy();\n    };\n  }\n}\n","import VuexORMGraphQL from './vuex-orm-graphql';\nimport { Components, Plugin } from '@vuex-orm/core/lib/plugins/use';\nimport { Options } from './support/interfaces';\n\n/**\n * Plugin class. This just provides a static install method for Vuex-ORM and stores the instance of the model\n * within this.instance.\n */\nexport default class VuexORMGraphQLPlugin implements Plugin {\n  /**\n   * Contains the instance of VuexORMGraphQL\n   */\n  public static instance: VuexORMGraphQL;\n\n  /**\n   * This is called, when VuexORM.install(VuexOrmGraphQL, options) is called.\n   *\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   * @returns {VuexORMGraphQL}\n   */\n  public static install (components: Components, options: Options): VuexORMGraphQL {\n    VuexORMGraphQLPlugin.instance = new VuexORMGraphQL(components, options);\n    return VuexORMGraphQLPlugin.instance;\n  }\n}\n"],"names":["root","pluralize","this","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","RegExp","restoreCase","word","token","toUpperCase","charAt","substr","toLowerCase","replace","match","index","str","args","result","arguments","sanitizeWord","rules","length","hasOwnProperty","len","test","replaceWord","replaceMap","keepMap","checkWord","bool","count","inclusive","pluralized","singular","plural","isPlural","isSingular","addPluralRule","replacement","push","addSingularRule","addUncountableRule","addIrregularRule","single","forEach","require","module","pluralizeLib","singularize","upcaseFirstLetter","input","slice","downcaseFirstLetter","prettify","query","parseQuery","graphQlDocumentToString","isPlainObject","obj","takeWhile","array","predicate","removeSymbols","JSON","parse","stringify","enabled","log","_i","console","groupCollapsed","PREFIX","messages","groupEnd","warn","variables","fetchPolicy","prettified","group","split","trim","e","error","baseModel","Map","singularName","entity","pluralName","fields","keys","name","set","field","context","Context","getInstance","components","Number","Increment","Attr","String","Boolean","BelongsTo","HasOne","MorphTo","MorphOne","model","originalFieldGenerator","bind","originalFields","boolean","Model","isFieldAttribute","_this","skipField","startsWith","skipFields","indexOf","shouldSkipField","getRelations","relation","foreignKey","relations","found","models","MorphMany","MorphedByMany","MorphToMany","type","related","id","withAllRecursive","where","first","fieldName","relatedModel","undefined","eagerLoad","find","n","data","whitelist","returnValue","key","value","includes","has","get","parent","getModel","Array","arrayModel_1","map","v","transformOutgoingData","$id","$self","mutation","recursiveCall","logger","isArray","d","transformIncomingData","localModel","nodes","connectionQueryMode","edges","newKey","isFieldNumber","parseFloat","endsWith","isTypeFieldOfPolymorphicRelation","apolloClient","options","bypassCache","logQuery","headers","Apollo","getHeaders","mutate","_a","Transformer","response","schema","types","mutations","queries","t","getType","f","connection","typeName","Schema","getTypeNameOfField","Error","allowNull","kind","getRealType","ofType","introspectionQuery","database","debugMode","debug","Logger","instance","apollo","collectModels","schemaWillBeLoaded","Promise","resolve","reject","X-GraphQL-Introspection-Query","simpleQuery","__schema","processSchema","determineQueryMode","name_1","entities","augment","multiple","path","filter","allowIdFields","getMutation","getQuery","params","buildArguments","getQueryFields","join","buildRelationsQuery","header","__type","buildField","signature","isForeignKey","skipFieldDueId","schemaField","findSchemaFieldForArgument","isConnectionField","typeOrValue","arg","QueryBuilder","determineAttributeType","isFilter","inputFields","relationQueries","fieldAsRelation","BelongsToMany","HasMany","HasManyThrough","HasManyBy","referencesItSelf","reverse","p","ignore","shouldEagerLoadRelation","newPath","isConnection","dispatch","all","Object","newData","dataKey","insertedData","concat","getCRUDName","action","loadSchema","_c","returnsConnection","buildQuery","request","NameGenerator","getNameForDestroy","parseInt","Store","insertData","records","newRecord","last","state","$name","transformedValue","_b","getModelFromState","prepareArgs","Action","mutationName","getNameForFetch","beforeBuildQuery","afterBuildQuery","_d","transformArgs","getNameForPersist","getRecordWithId","addRecordToArgs","oldRecord","deleteObsoleteRecord","$delete","getNameForPush","parsedQuery","simpleMutation","setup","setupActions","setupModelMethods","RootActions","SimpleQuery","call","SimpleMutation","Actions","fetch","Fetch","persist","Persist","Push","destroy","Destroy","Mutate","Query","filterObj","customQuery","prototype","$mutate","$dispatch","$customQuery","$persist","$push","$destroy","$deleteAndDestroy","VuexORMGraphQL","VuexORMGraphQLPlugin"],"mappings":"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B,QAChB,0CAA2C,OAC3C,kGAAmG,QACnG,gCAAiC,SACjC,2BAA4B,SAC5B,iBAAkB,UAClB,wHAAyH,QACzH,qGAAsG,QACtG,QAAS,QACT,2CAA4C,YAC5C,oBAAqB,UACrB,uBAAwB,UACxB,oBAAqB,SACrB,gDAAiD,WACjD,sBAAuB,UACvB,sBAAuB,WACvB,oBAAqB,UACrB,SAAU,OACV,WAAY,QACZ,OAAQ,QACTyC,QAAQ,SAAUzC,GAClB,OAAOR,EAAU0C,cAAclC,EAAK,GAAIA,EAAK,QAO5C,MAAO,KACP,SAAU,OACV,gEAAiE,SACjE,kCAAmC,QACnC,QAAS,MACT,uFAAwF,SACxF,oBAAqB,SACrB,aAAc,WACd,sBAAuB,OACvB,iFAAkF,OAClF,qEAAsE,UACtE,iCAAkC,OAClC,oBAAqB,SACrB,kGAAmG,SACnG,yGAA0G,SAC1G,8FAA+F,SAC/F,0BAA2B,QAC3B,+BAAgC,SAChC,sBAAuB,SACvB,oBAAqB,WACrB,eAAgB,OAChB,YAAa,OACb,QAAS,QACVyC,QAAQ,SAAUzC,GAClB,OAAOR,EAAU6C,gBAAgBrC,EAAK,GAAIA,EAAK,OAQ/C,YACA,SACA,SACA,MACA,UACA,OACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,MACA,UACA,UACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,QACA,OACA,OACA,WACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,UACA,QACA,QACA,SACA,UACA,gBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MAEA,gBACA,SACA,SACA,YACA,WACA,QACA,WACAyC,QAAQjD,EAAU8C,oBAEb9C,GApegB,mBAAZkD,gBAETC,UAAiBnD,IAQjBD,EAAKC,UAAYA,wNCFRA,YAAYoD,UA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"}