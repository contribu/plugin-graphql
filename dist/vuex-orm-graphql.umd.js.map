{"version":3,"file":"vuex-orm-graphql.umd.js","sources":["../node_modules/lodash.isequal/index.js","../node_modules/lodash.clone/index.js","../node_modules/pluralize/pluralize.js","../src/support/utils.ts","../src/common/logger.ts","../src/orm/model.ts","../src/graphql/transformer.ts","../src/graphql/apollo.ts","../src/graphql/schema.ts","../src/common/context.ts","../src/graphql/query-builder.ts","../src/orm/store.ts","../src/graphql/name-generator.ts","../src/actions/action.ts","../src/actions/destroy.ts","../src/actions/fetch.ts","../src/actions/mutate.ts","../src/actions/persist.ts","../src/actions/push.ts","../src/actions/query.ts","../src/actions/simple-query.ts","../src/actions/simple-mutation.ts","../src/vuex-orm-graphql.ts","../src/plugin.ts","../src/test-utils.ts"],"sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, false, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = clone;\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Upper cased words. E.g. \"HELLO\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['whiskey', 'whiskies']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/(m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/(m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],\n    [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'alcohol',\n    'ammo',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'manga',\n    'news',\n    'pike',\n    'plankton',\n    'pliers',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transporation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","// import { parse } from \"graphql/language/parser\";\n// import { print } from \"graphql/language/printer\";\n// import { DocumentNode } from \"graphql/language/ast\";\n\n// @ts-ignore\nimport lodashIsEqual from \"lodash.isequal\";\n\n// @ts-ignore\nimport lodashClone from \"lodash.clone\";\n\n// @ts-ignore\nimport pluralizeLib from \"pluralize\";\nexport const pluralize = pluralizeLib.plural;\nexport const singularize = pluralizeLib.singular;\n\n/**\n * Capitalizes the first letter of the given string.\n *\n * @param {string} input\n * @returns {string}\n */\nexport function upcaseFirstLetter(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1);\n}\n\n/**\n * Down cases the first letter of the given string.\n *\n * @param {string} input\n * @returns {string}\n */\nexport function downcaseFirstLetter(input: string) {\n  return input.charAt(0).toLowerCase() + input.slice(1);\n}\n\n/**\n * Takes a string with a graphql query and formats it. Useful for debug output and the tests.\n * @param {string} query\n * @returns {string}\n */\nexport function prettify(query: string): string {\n  return query;\n  // return print(parseQuery(query));\n}\n\n/**\n * Returns a parsed query as GraphQL AST DocumentNode.\n *\n * @param {string | DocumentNode} query - Query as string or GraphQL AST DocumentNode.\n *\n * @returns {DocumentNode} Query as GraphQL AST DocumentNode.\n */\nexport function parseQuery(query: string): string {\n  return query;\n  // return typeof query === \"string\" ? parse(query) : query;\n}\n\n/**\n * @param {DocumentNode} query - The GraphQL AST DocumentNode.\n *\n * @returns {string} the GraphQL query within a DocumentNode as a plain string.\n */\nexport function graphQlDocumentToString(query: string): string {\n  return query;\n  // return query.loc!.source.body;\n}\n\n/**\n * Tells if a object is just a simple object.\n *\n * @param {any} obj - Value to check.\n */\nexport function isPlainObject(obj: any): boolean {\n  // Basic check for Type object that's not null\n  return obj !== null && typeof obj === \"object\";\n}\n\n/**\n * Creates an object composed of the picked `object` properties.\n * @param {object} object - Object.\n * @param {array} props - Properties to pick.\n */\nexport function pick(object: any, props: Array<string>) {\n  if (!object) {\n    return {};\n  }\n\n  let index = -1;\n  const length = props.length;\n  const result = {};\n\n  while (++index < length) {\n    const prop = props[index];\n    result[prop] = object[prop];\n  }\n\n  return result;\n}\n\nexport function isEqual(a: object, b: object): boolean {\n  // Couldn' find a simpler working implementation yet.\n  return lodashIsEqual(a, b);\n}\n\nexport function clone(input: any): any {\n  // Couldn' find a simpler working implementation yet.\n  return lodashClone(input);\n}\n\nexport function takeWhile(\n  array: Array<any>,\n  predicate: (x: any, idx: number, array: Array<any>) => any\n) {\n  let index = -1;\n\n  while (++index < array.length && predicate(array[index], index, array)) {\n    // just increase index\n  }\n\n  return array.slice(0, index);\n}\n\nexport function matches(source: any) {\n  source = clone(source);\n\n  return (object: any) => isEqual(object, source);\n}\n\nexport function removeSymbols(input: any) {\n  return JSON.parse(JSON.stringify(input));\n}\n","// import { DocumentNode } from \"graphql/language/ast\";\nimport { Arguments } from \"../support/interfaces\";\n// import { FetchPolicy } from \"apollo-client\";\nimport { isPlainObject, prettify } from \"../support/utils\";\n\n/**\n * Vuex-ORM-Apollo Debug Logger.\n * Wraps console and only logs if enabled.\n *\n * Also contains some methods to format graphql queries for the output\n */\nexport default class Logger {\n  /**\n   * Tells if any logging should happen\n   * @type {boolean}\n   */\n  private readonly enabled: boolean;\n\n  /**\n   * Fancy Vuex-ORM-Apollo prefix for all log messages.\n   * @type {string[]}\n   */\n  private readonly PREFIX = [\n    \"%c Vuex-ORM: GraphQL Plugin %c\",\n    \"background: #35495e; padding: 1px 0; border-radius: 3px; color: #eee;\",\n    \"background: transparent;\"\n  ];\n\n  /**\n   * @constructor\n   * @param {boolean} enabled Tells if any logging should happen\n   */\n  public constructor(enabled: boolean) {\n    this.enabled = enabled;\n    this.log(\"Logging is enabled.\");\n  }\n\n  /**\n   * Wraps console.group. In TEST env console.log is used instead because console.group doesn't work on CLI.\n   * If available console.groupCollapsed will be used instead.\n   * @param {Array<any>} messages\n   */\n  public group(...messages: Array<any>): void {\n    if (this.enabled) {\n      if (console.groupCollapsed) {\n        console.groupCollapsed(...this.PREFIX, ...messages);\n      } else {\n        console.log(...this.PREFIX, ...messages);\n      }\n    }\n  }\n\n  /**\n   * Wrapper for console.groupEnd. In TEST env nothing happens because console.groupEnd doesn't work on CLI.\n   */\n  public groupEnd(): void {\n    if (this.enabled && console.groupEnd) console.groupEnd();\n  }\n\n  /**\n   * Wrapper for console.log.\n   * @param {Array<any>} messages\n   */\n  public log(...messages: Array<any>): void {\n    if (this.enabled) {\n      console.log(...this.PREFIX, ...messages);\n    }\n  }\n\n  /**\n   * Wrapper for console.warn.\n   * @param {Array<any>} messages\n   */\n  public warn(...messages: Array<any>): void {\n    if (this.enabled) {\n      console.warn(...this.PREFIX, ...messages);\n    }\n  }\n\n  /**\n   * Logs a graphql query in a readable format and with all information like fetch policy and variables.\n   * @param {string | DocumentNode} query\n   * @param {Arguments} variables\n   * @param {FetchPolicy} fetchPolicy\n   */\n  public logQuery(query: string, variables?: Arguments, fetchPolicy?: any) {\n    if (this.enabled) {\n      try {\n        let prettified = prettify(query as string);\n\n        this.group(\n          \"Sending query:\",\n          prettified\n            .split(\"\\n\")[1]\n            .replace(\"{\", \"\")\n            .trim()\n        );\n        console.log(prettified);\n\n        if (variables) console.log(\"VARIABLES:\", variables);\n        if (fetchPolicy) console.log(\"FETCH POLICY:\", fetchPolicy);\n\n        this.groupEnd();\n      } catch (e) {\n        console.error(\"[Vuex-ORM-Apollo] There is a syntax error in the query!\", e, query);\n      }\n    }\n  }\n}\n","import { Model as ORMModel } from \"@vuex-orm/core\";\nimport { Field } from \"../support/interfaces\";\nimport Context from \"../common/context\";\nimport { Mock, MockOptions } from \"../test-utils\";\nimport { pluralize, singularize, pick, isEqual } from \"../support/utils\";\n\n/**\n * Wrapper around a Vuex-ORM model with some useful methods.\n *\n * Also provides a mock system, to define mocking responses for actions.\n */\nexport default class Model {\n  /**\n   * The singular name of a model like `blogPost`\n   * @type {string}\n   */\n  public readonly singularName: string;\n\n  /**\n   * The plural name of a model like `blogPosts`\n   * @type {string}\n   */\n  public readonly pluralName: string;\n\n  /**\n   * The original Vuex-ORM model\n   */\n  public readonly baseModel: ORMModel;\n\n  /**\n   * The fields of the model\n   * @type {Map<string, Field>}\n   */\n  public readonly fields: Map<string, Field> = new Map<string, Field>();\n\n  /**\n   * Container for the mocks.\n   * @type {Object}\n   */\n  private mocks: { [key: string]: Array<Mock> } = {};\n\n  /**\n   * @constructor\n   * @param {Model} baseModel The original Vuex-ORM model\n   */\n  public constructor(baseModel: ORMModel) {\n    this.baseModel = baseModel;\n\n    // Generate name variants\n    this.singularName = singularize(this.baseModel.entity);\n    this.pluralName = pluralize(this.baseModel.entity);\n\n    // Cache the fields of the model in this.fields\n    const fields = this.baseModel.fields();\n    Object.keys(fields).forEach((name: string) => {\n      this.fields.set(name, fields[name]);\n    });\n  }\n\n  /**\n   * Tells if a field is a numeric field.\n   *\n   * @param {Field | undefined} field\n   * @returns {boolean}\n   */\n  public static isFieldNumber(field: Field | undefined): boolean {\n    if (!field) return false;\n\n    const context = Context.getInstance();\n    return (\n      field instanceof context.components.Number || field instanceof context.components.Increment\n    );\n  }\n\n  /**\n   * Tells if a field is a attribute (and thus not a relation)\n   * @param {Field} field\n   * @returns {boolean}\n   */\n  public static isFieldAttribute(field: Field): boolean {\n    const context = Context.getInstance();\n\n    return (\n      field instanceof context.components.Increment ||\n      field instanceof context.components.Attr ||\n      field instanceof context.components.String ||\n      field instanceof context.components.Number ||\n      field instanceof context.components.Boolean\n    );\n  }\n\n  /**\n   * Tells if a field which represents a relation is a connection (multiple).\n   * @param {Field} field\n   * @returns {boolean}\n   */\n  public static isConnection(field: Field): boolean {\n    const context = Context.getInstance();\n\n    return !(\n      field instanceof context.components.BelongsTo ||\n      field instanceof context.components.HasOne ||\n      field instanceof context.components.MorphTo ||\n      field instanceof context.components.MorphOne\n    );\n  }\n\n  /**\n   * Adds $isPersisted and other meta fields to the model by overwriting the fields() method.\n   * @todo is this a good way to add fields?\n   * @param {Model} model\n   */\n  public static augment(model: Model) {\n    const originalFieldGenerator = model.baseModel.fields.bind(model.baseModel);\n\n    model.baseModel.fields = () => {\n      const originalFields = originalFieldGenerator();\n\n      originalFields[\"$isPersisted\"] = model.baseModel.boolean(false);\n\n      return originalFields;\n    };\n  }\n\n  /**\n   * Returns all fields which should be included in a graphql query: All attributes which are not included in the\n   * skipFields array or start with $.\n   * @returns {Array<string>} field names which should be queried\n   */\n  public getQueryFields(): Array<string> {\n    const fields: Array<string> = [];\n\n    this.fields.forEach((field: Field, name: string) => {\n      if (Model.isFieldAttribute(field) && !this.skipField(name)) {\n        fields.push(name);\n      }\n    });\n\n    return fields;\n  }\n\n  /**\n   * Tells if a field should be ignored. This is true for fields that start with a `$` or is it is within the skipField\n   * property or is the foreignKey of a belongsTo/hasOne relation.\n   *\n   * @param {string} field\n   * @returns {boolean}\n   */\n  public skipField(field: string) {\n    if (field.startsWith(\"$\")) return true;\n    if (this.baseModel.skipFields && this.baseModel.skipFields.indexOf(field) >= 0) return true;\n\n    const context = Context.getInstance();\n\n    let shouldSkipField: boolean = false;\n\n    this.getRelations().forEach((relation: Field) => {\n      if (\n        (relation instanceof context.components.BelongsTo ||\n          relation instanceof context.components.HasOne) &&\n        relation.foreignKey === field\n      ) {\n        shouldSkipField = true;\n        return false;\n      }\n      return true;\n    });\n\n    return shouldSkipField;\n  }\n\n  /**\n   * @returns {Map<string, Field>} all relations of the model which should be included in a graphql query\n   */\n  public getRelations(): Map<string, Field> {\n    const relations = new Map<string, Field>();\n\n    this.fields.forEach((field: Field, name: string) => {\n      if (!Model.isFieldAttribute(field)) {\n        relations.set(name, field);\n      }\n    });\n\n    return relations;\n  }\n\n  /**\n   * This accepts a field like `subjectType` and checks if this is just randomly named `...Type` or it is part\n   * of a polymorphic relation.\n   * @param {string} name\n   * @returns {boolean}\n   */\n  public isTypeFieldOfPolymorphicRelation(name: string): boolean {\n    const context = Context.getInstance();\n    let found: boolean = false;\n\n    context.models.forEach(model => {\n      if (found) return false;\n\n      model.getRelations().forEach(relation => {\n        if (\n          relation instanceof context.components.MorphMany ||\n          relation instanceof context.components.MorphedByMany ||\n          relation instanceof context.components.MorphOne ||\n          relation instanceof context.components.MorphTo ||\n          relation instanceof context.components.MorphToMany\n        ) {\n          if (\n            relation.type === name &&\n            relation.related &&\n            relation.related.entity === this.baseModel.entity\n          ) {\n            found = true;\n            return false;\n          }\n        }\n\n        return true;\n      });\n\n      return true;\n    });\n\n    return found;\n  }\n\n  /**\n   * Returns a record of this model with the given ID.\n   * @param {number} id\n   * @returns {any}\n   */\n  public getRecordWithId(id: number) {\n    return this.baseModel\n      .query()\n      .withAllRecursive()\n      .where(\"id\", id)\n      .first();\n  }\n\n  /**\n   * Determines if we should eager load (means: add as a field in the graphql query) a related entity. belongsTo or\n   * hasOne related entities are always eager loaded. Others can be added to the `eagerLoad` array of the model.\n   *\n   * @param {string} fieldName Name of the field\n   * @param {Field} field Relation field\n   * @param {Model} relatedModel Related model\n   * @returns {boolean}\n   */\n  public shouldEagerLoadRelation(fieldName: string, field: Field, relatedModel: Model): boolean {\n    const context = Context.getInstance();\n\n    if (\n      field instanceof context.components.HasOne ||\n      field instanceof context.components.BelongsTo ||\n      field instanceof context.components.MorphOne\n    ) {\n      return true;\n    }\n\n    const eagerLoadList: Array<String> = this.baseModel.eagerLoad || [];\n    return (\n      eagerLoadList.find(n => {\n        return n === relatedModel.singularName || n === relatedModel.pluralName || n === fieldName;\n      }) !== undefined\n    );\n  }\n\n  /**\n   * Adds a mock.\n   *\n   * @param {Mock} mock - Mock config.\n   * @returns {boolean}\n   */\n  public $addMock(mock: Mock): boolean {\n    if (this.$findMock(mock.action, mock.options)) return false;\n    if (!this.mocks[mock.action]) this.mocks[mock.action] = [];\n\n    this.mocks[mock.action].push(mock);\n    return true;\n  }\n\n  /**\n   * Finds a mock for the given action and options.\n   *\n   * @param {string} action - Name of the action like 'fetch'.\n   * @param {MockOptions} options - MockOptions like { variables: { id: 42 } }.\n   * @returns {Mock | null} null when no mock was found.\n   */\n  public $findMock(action: string, options: MockOptions | undefined): Mock | null {\n    if (this.mocks[action]) {\n      return (\n        this.mocks[action].find(m => {\n          if (!m.options || !options) return true;\n\n          const relevantOptions = pick(options, Object.keys(m.options));\n          return isEqual(relevantOptions, m.options || {});\n        }) || null\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Hook to be called by all actions in order to get the mock returnValue.\n   *\n   * @param {string} action - Name of the action like 'fetch'.\n   * @param {MockOptions} options - MockOptions.\n   * @returns {any} null when no mock was found.\n   */\n  public $mockHook(action: string, options: MockOptions): any {\n    let returnValue: null | { [key: string]: any } = null;\n    const mock = this.$findMock(action, options);\n\n    if (mock) {\n      if (mock.returnValue instanceof Function) {\n        returnValue = mock.returnValue();\n      } else {\n        returnValue = mock.returnValue || null;\n      }\n    }\n\n    if (returnValue) {\n      if (returnValue instanceof Array) {\n        returnValue.forEach(r => (r.$isPersisted = true));\n      } else {\n        returnValue.$isPersisted = true;\n      }\n\n      return { [this.pluralName]: returnValue };\n    }\n\n    return null;\n  }\n}\n","import { Data, Field } from \"../support/interfaces\";\nimport Model from \"../orm/model\";\nimport { Model as ORMModel } from \"@vuex-orm/core\";\nimport Context from \"../common/context\";\nimport {\n  pluralize,\n  singularize,\n  clone,\n  downcaseFirstLetter,\n  isPlainObject\n} from \"../support/utils\";\n\n/**\n * This class provides methods to transform incoming data from GraphQL in to a format Vuex-ORM understands and\n * vice versa.\n */\nexport default class Transformer {\n  /**\n   * Transforms outgoing data. Use for variables param.\n   *\n   * Omits relations and some other fields.\n   *\n   * @param model\n   * @param {Data} data\n   * @param {Array<String>} whitelist of fields\n   * @returns {Data}\n   */\n  public static transformOutgoingData(model: Model, data: Data, whitelist?: Array<String>): Data {\n    const context = Context.getInstance();\n    const relations: Map<string, Field> = model.getRelations();\n    const returnValue: Data = {};\n\n    Object.keys(data).forEach(key => {\n      const value = data[key];\n\n      // Always add fields on the whitelist. Ignore hasMany/One connections, empty fields and internal fields ($)\n      if (\n        (whitelist && whitelist.includes(key)) ||\n        ((!relations.has(key) || relations.get(key) instanceof context.components.BelongsTo) &&\n          !key.startsWith(\"$\") &&\n          value !== null &&\n          value !== undefined)\n      ) {\n        let relatedModel =\n          relations.get(key) && relations.get(key)!.parent\n            ? context.getModel(singularize(relations.get(key)!.parent!.entity), true)\n            : null;\n        if (value instanceof Array) {\n          // Either this is a hasMany field or a .attr() field which contains an array.\n          const arrayModel = context.getModel(singularize(key), true);\n\n          if (arrayModel) {\n            returnValue[key] = value.map(v => this.transformOutgoingData(arrayModel || model, v));\n          } else {\n            returnValue[key] = value;\n          }\n        } else if (typeof value === \"object\" && value.$id !== undefined) {\n          if (!relatedModel) {\n            relatedModel = context.getModel((value as ORMModel).$self().entity);\n          }\n\n          // Value is a record, transform that too\n          returnValue[key] = this.transformOutgoingData(relatedModel, value);\n        } else {\n          // In any other case just let the value be what ever it is\n          returnValue[key] = value;\n        }\n      }\n    });\n\n    return returnValue;\n  }\n\n  /**\n   * Transforms a set of incoming data to the format vuex-orm requires.\n   *\n   * @param {Data | Array<Data>} data\n   * @param model\n   * @param mutation required to transform something like `disableUserAddress` to the actual model name.\n   * @param {boolean} recursiveCall\n   * @returns {Data}\n   */\n  public static transformIncomingData(\n    data: Data | Array<Data>,\n    model: Model,\n    mutation: boolean = false,\n    recursiveCall: boolean = false\n  ): Data {\n    let result: Data = {};\n    const context = Context.getInstance();\n\n    if (!recursiveCall) {\n      context.logger.group(\"Transforming incoming data\");\n      context.logger.log(\"Raw data:\", data);\n    }\n\n    if (Array.isArray(data)) {\n      result = data.map((d: any) => this.transformIncomingData(d, model, mutation, true));\n    } else {\n      Object.keys(data).forEach(key => {\n        if (key in data) {\n          if (isPlainObject(data[key])) {\n            const localModel: Model = context.getModel(key, true) || model;\n\n            if (data[key].nodes && context.connectionQueryMode === \"nodes\") {\n              result[pluralize(key)] = this.transformIncomingData(\n                data[key].nodes,\n                localModel,\n                mutation,\n                true\n              );\n            } else if (data[key].edges && context.connectionQueryMode === \"edges\") {\n              result[pluralize(key)] = this.transformIncomingData(\n                data[key].edges,\n                localModel,\n                mutation,\n                true\n              );\n            } else if (data[\"node\"] && context.connectionQueryMode === \"edges\") {\n              result = this.transformIncomingData(data[\"node\"], localModel, mutation, true);\n            } else {\n              let newKey = key;\n\n              if (mutation && !recursiveCall) {\n                newKey = data[key].nodes ? localModel.pluralName : localModel.singularName;\n                newKey = downcaseFirstLetter(newKey);\n              }\n\n              result[newKey] = this.transformIncomingData(data[key], localModel, mutation, true);\n            }\n          } else if (Model.isFieldNumber(model.fields.get(key))) {\n            result[key] = parseFloat(data[key]);\n          } else if (key.endsWith(\"Type\") && model.isTypeFieldOfPolymorphicRelation(key)) {\n            result[key] = pluralize(downcaseFirstLetter(data[key]));\n          } else {\n            result[key] = data[key];\n          }\n        }\n      });\n    }\n\n    if (!recursiveCall) {\n      context.logger.log(\"Transformed data:\", result);\n      context.logger.groupEnd();\n    } else {\n      result[\"$isPersisted\"] = true;\n    }\n\n    // Make sure this is really a plain JS object. We had some issues in testing here.\n    return clone(result);\n  }\n}\n","// import { ApolloClient, FetchPolicy } from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// import { HttpLink } from \"apollo-link-http\";\n// import { ApolloLink } from \"apollo-link\";\nimport Context from \"../common/context\";\nimport { Arguments, Data } from \"../support/interfaces\";\nimport Transformer from \"./transformer\";\nimport Model from \"../orm/model\";\n// import gql from \"graphql-tag\";\nimport { prettify } from \"../support/utils\";\n\n/**\n * This class takes care of the communication with the graphql endpoint by leveraging the awesome apollo-client lib.\n */\nexport default class Apollo {\n  /**\n   * The http link instance to use.\n   * @type {HttpLink}\n   */\n  // private readonly httpLink: any;\n\n  /**\n   * The ApolloClient instance\n   * @type {ApolloClient}\n   */\n  private readonly apolloClient: any;\n\n  /**\n   * @constructor\n   */\n  public constructor() {\n    const context = Context.getInstance();\n\n    // This allows the test suite to pass a custom link\n    // if (context.options.link) {\n    //   this.httpLink = context.options.link;\n    // } else {\n    //   /* istanbul ignore next */\n    //   this.httpLink = new HttpLink({\n    //     uri: context.options.url ? context.options.url : \"/graphql\",\n    //     credentials: context.options.credentials ? context.options.credentials : \"same-origin\",\n    //     useGETForQueries: Boolean(context.options.useGETForQueries)\n    //   });\n    // }\n\n    // this.apolloClient = new ApolloClient({\n    //   link: this.httpLink,\n    //   cache: new InMemoryCache(),\n    //   connectToDevTools: context.debugMode\n    // });\n\n    this.apolloClient = context.options.apolloClient;\n    this.apolloClient.prettify = prettify;\n  }\n\n  /**\n   * Sends a request to the GraphQL API via apollo\n   * @param model\n   * @param {any} query The query to send (result from gql())\n   * @param {Arguments} variables Optional. The variables to send with the query\n   * @param {boolean} mutation Optional. If this is a mutation (true) or a query (false, default)\n   * @param {boolean} bypassCache If true the query will be send to the server without using the cache. For queries only\n   * @returns {Promise<Data>} The new records\n   */\n  public async request(\n    model: Model,\n    query: any,\n    variables?: Arguments,\n    mutation: boolean = false,\n    bypassCache: boolean = false\n  ): Promise<Data> {\n    const fetchPolicy = bypassCache ? \"network-only\" : \"cache-first\";\n    Context.getInstance().logger.logQuery(query, variables, fetchPolicy);\n\n    const context = { headers: Apollo.getHeaders() };\n\n    let response;\n    if (mutation) {\n      response = await this.apolloClient.mutate({ mutation: query, variables, context });\n    } else {\n      response = await this.apolloClient.query({ query, variables, fetchPolicy, context });\n    }\n\n    // Transform incoming data into something useful\n    return Transformer.transformIncomingData(response.data as Data, model, mutation);\n  }\n\n  public async simpleQuery(\n    query: string,\n    variables: Arguments,\n    bypassCache: boolean = false,\n    context?: Data\n  ): Promise<any> {\n    const fetchPolicy = bypassCache ? \"network-only\" : \"cache-first\";\n    return this.apolloClient.query({\n      query: query,\n      variables,\n      fetchPolicy,\n      context: { headers: Apollo.getHeaders() }\n    });\n  }\n\n  public async simpleMutation(query: string, variables: Arguments, context?: Data): Promise<any> {\n    return this.apolloClient.mutate({\n      mutation: query,\n      variables,\n      context: { headers: Apollo.getHeaders() }\n    });\n  }\n\n  private static getHeaders() {\n    const context = Context.getInstance();\n\n    let headers: any = context.options.headers ? context.options.headers : {};\n\n    if (typeof headers === \"function\") {\n      headers = headers(context);\n    }\n\n    return headers;\n  }\n}\n","import {\n  GraphQLField,\n  GraphQLSchema,\n  GraphQLType,\n  GraphQLTypeDefinition\n} from \"../support/interfaces\";\nimport { upcaseFirstLetter } from \"../support/utils\";\n\nexport default class Schema {\n  private schema: GraphQLSchema;\n  private types: Map<string, GraphQLType>;\n  private mutations: Map<string, GraphQLField>;\n  private queries: Map<string, GraphQLField>;\n\n  public constructor(schema: GraphQLSchema) {\n    this.schema = schema;\n    this.types = new Map<string, GraphQLType>();\n    this.mutations = new Map<string, GraphQLField>();\n    this.queries = new Map<string, GraphQLField>();\n\n    this.schema.types.forEach((t: GraphQLType) => this.types.set(t.name, t));\n\n    this.getType(\"Query\")!.fields!.forEach(f => this.queries.set(f.name, f));\n    this.getType(\"Mutation\")!.fields!.forEach(f => this.mutations.set(f.name, f));\n  }\n\n  public determineQueryMode(): string {\n    let connection: GraphQLType | null = null;\n\n    this.queries.forEach(query => {\n      const typeName = Schema.getTypeNameOfField(query);\n      if (typeName.endsWith(\"TypeConnection\")) {\n        connection = this.getType(typeName);\n        return false; // break\n      }\n      return true;\n    });\n\n    /* istanbul ignore next */\n    if (!connection) {\n      throw new Error(\n        \"Can't determine the connection mode due to the fact that here are no connection types in the schema. Please set the connectionQueryMode via Vuex-ORM-GraphQL options!\"\n      );\n    }\n\n    if (connection!.fields!.find(f => f.name === \"nodes\")) {\n      return \"nodes\";\n    } else if (connection!.fields!.find(f => f.name === \"edges\")) {\n      return \"edges\";\n    } else {\n      return \"plain\";\n    }\n  }\n\n  public getType(name: string, allowNull: boolean = false): GraphQLType | null {\n    name = upcaseFirstLetter(name);\n    const type = this.types.get(name);\n\n    if (!allowNull && !type) {\n      throw new Error(`Couldn't find Type of name ${name} in the GraphQL Schema.`);\n    }\n\n    return type || null;\n  }\n\n  public getMutation(name: string, allowNull: boolean = false): GraphQLField | null {\n    const mutation = this.mutations.get(name);\n\n    /* istanbul ignore next */\n    if (!allowNull && !mutation) {\n      throw new Error(`Couldn't find Mutation of name ${name} in the GraphQL Schema.`);\n    }\n\n    return mutation || null;\n  }\n\n  public getQuery(name: string, allowNull: boolean = false): GraphQLField | null {\n    const query = this.queries.get(name);\n\n    /* istanbul ignore next */\n    if (!allowNull && !query) {\n      throw new Error(`Couldn't find Query of name ${name} in the GraphQL Schema.`);\n    }\n\n    return query || null;\n  }\n\n  static returnsConnection(field: GraphQLField): boolean {\n    return Schema.getTypeNameOfField(field).endsWith(\"TypeConnection\");\n  }\n\n  static getRealType(type: GraphQLTypeDefinition): GraphQLTypeDefinition {\n    if (type.kind === \"NON_NULL\") {\n      return this.getRealType(type.ofType);\n    } else {\n      return type;\n    }\n  }\n\n  static getTypeNameOfField(field: GraphQLField): string {\n    const type = this.getRealType(field.type);\n\n    if (type.kind === \"LIST\") {\n      return `[${type.ofType.name}]`;\n    }\n\n    const name = type.name || type.ofType.name || type.ofType.ofType.name;\n\n    /* istanbul ignore next */\n    if (!name) throw new Error(`Can't find type name for field ${field.name}`);\n\n    return name;\n  }\n}\n","import Logger from \"./logger\";\nimport Model from \"../orm/model\";\nimport { Model as ORMModel } from \"@vuex-orm/core\";\nimport { Components } from \"@vuex-orm/core/lib/plugins/use\";\nimport { singularize, downcaseFirstLetter, isEqual, pick } from \"../support/utils\";\nimport Apollo from \"../graphql/apollo\";\nimport Database from \"@vuex-orm/core/lib/database/Database\";\nimport { Field, GraphQLType, Options } from \"../support/interfaces\";\nimport Schema from \"../graphql/schema\";\nimport { Mock, MockOptions } from \"../test-utils\";\n\nconst introspectionQuery = `\nquery Introspection {\n  __schema {\n    types {\n      name\n      description\n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          name\n          description\n          type {\n            name\n            kind\n\n            ofType {\n              kind\n\n              name\n              ofType {\n                kind\n                name\n\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n\n        type {\n          name\n          kind\n\n          ofType {\n            kind\n\n            name\n            ofType {\n              kind\n              name\n\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n\n      inputFields {\n        name\n        description\n        type {\n          name\n          kind\n\n          ofType {\n            kind\n\n            name\n            ofType {\n              kind\n              name\n\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n/**\n * Internal context of the plugin. This class contains all information, the models, database, logger and so on.\n *\n * It's a singleton class, so just call Context.getInstance() anywhere you need the context.\n */\nexport default class Context {\n  /**\n   * Contains the instance for the singleton pattern.\n   * @type {Context}\n   */\n  public static instance: Context;\n\n  /**\n   * Components collection of Vuex-ORM\n   * @type {Components}\n   */\n  public readonly components: Components;\n\n  /**\n   * The options which have been passed to VuexOrm.install\n   * @type {Options}\n   */\n  public readonly options: Options;\n\n  /**\n   * The Vuex-ORM database\n   * @type {Database}\n   */\n  public readonly database: Database;\n\n  /**\n   * Collection of all Vuex-ORM models wrapped in a Model instance.\n   * @type {Map<any, any>}\n   */\n  public readonly models: Map<string, Model> = new Map();\n\n  /**\n   * When true, the logging is enabled.\n   * @type {boolean}\n   */\n  public readonly debugMode: boolean = false;\n\n  /**\n   * Our nice Vuex-ORM-GraphQL logger\n   * @type {Logger}\n   */\n  public readonly logger: Logger;\n\n  /**\n   * Instance of Apollo which cares about the communication with the graphql endpoint.\n   * @type {Apollo}\n   */\n  public apollo!: Apollo;\n\n  /**\n   * The graphql schema. Is null until the first request.\n   * @type {Schema}\n   */\n  public schema: Schema | undefined;\n\n  /**\n   * Tells if the schema is already loaded or the loading is currently processed.\n   * @type {boolean}\n   */\n  private schemaWillBeLoaded: Promise<Schema> | undefined;\n\n  /**\n   * Defines how to query connections. 'auto' | 'nodes' | 'edges' | 'plain'\n   */\n  public connectionQueryMode: string = \"auto\";\n\n  /**\n   * Container for the global mocks.\n   * @type {Object}\n   */\n  private globalMocks: { [key: string]: Array<Mock> } = {};\n\n  /**\n   * Private constructor, called by the setup method\n   *\n   * @constructor\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   */\n  private constructor(components: Components, options: Options) {\n    this.components = components;\n    this.options = options;\n\n    this.database = options.database;\n    this.debugMode = Boolean(options.debug);\n    this.logger = new Logger(this.debugMode);\n\n    /* istanbul ignore next */\n    if (!options.database) {\n      throw new Error(\"database param is required to initialize vuex-orm-graphql!\");\n    }\n  }\n\n  /**\n   * Get the singleton instance of the context.\n   * @returns {Context}\n   */\n  public static getInstance(): Context {\n    return this.instance;\n  }\n\n  /**\n   * This is called only once and creates a new instance of the Context.\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   * @returns {Context}\n   */\n  public static setup(components: Components, options: Options): Context {\n    this.instance = new Context(components, options);\n\n    this.instance.apollo = new Apollo();\n    this.instance.collectModels();\n\n    this.instance.logger.group(\"Context setup\");\n    this.instance.logger.log(\"components\", this.instance.components);\n    this.instance.logger.log(\"options\", this.instance.options);\n    this.instance.logger.log(\"database\", this.instance.database);\n    this.instance.logger.log(\"models\", this.instance.models);\n    this.instance.logger.groupEnd();\n\n    return this.instance;\n  }\n\n  public async loadSchema(): Promise<Schema> {\n    if (!this.schemaWillBeLoaded) {\n      this.schemaWillBeLoaded = new Promise(async (resolve, reject) => {\n        this.logger.log(\"Fetching GraphQL Schema initially ...\");\n\n        if (this.options.connectionQueryMode) {\n          this.connectionQueryMode = this.options.connectionQueryMode;\n        } else {\n          this.connectionQueryMode = \"auto\";\n        }\n\n        // We send a custom header along with the request. This is required for our test suite to mock the schema request.\n        const context = {\n          headers: { \"X-GraphQL-Introspection-Query\": \"true\" }\n        };\n\n        const result = await this.apollo.simpleQuery(introspectionQuery, {}, true, context);\n        this.schema = new Schema(result.data.__schema);\n\n        this.logger.log(\"GraphQL Schema successful fetched\", result);\n\n        this.logger.log(\"Starting to process the schema ...\");\n        this.processSchema();\n        this.logger.log(\"Schema procession done!\");\n\n        resolve(this.schema);\n      });\n    }\n\n    return this.schemaWillBeLoaded;\n  }\n\n  public loadSchemaSync(result: any) {\n    this.logger.log(\"loadSchemaSync\");\n\n    if (this.options.connectionQueryMode) {\n      this.connectionQueryMode = this.options.connectionQueryMode;\n    } else {\n      this.connectionQueryMode = \"auto\";\n    }\n    this.schema = new Schema(result.data.__schema);\n    this.logger.log(\"GraphQL Schema successful fetched\", result);\n\n    this.logger.log(\"Starting to process the schema ...\");\n    this.processSchema();\n    this.logger.log(\"Schema procession done!\");\n\n    this.schemaWillBeLoaded = Promise.resolve(this.schema);\n  }\n\n  public processSchema() {\n    this.models.forEach((model: Model) => {\n      let type: GraphQLType;\n\n      try {\n        type = this.schema!.getType(model.singularName)!;\n      } catch (error) {\n        this.logger.warn(`Ignoring entity ${model.singularName} because it's not in the schema.`);\n        return;\n      }\n\n      model.fields.forEach((field: Field, fieldName: string) => {\n        if (!type.fields!.find(f => f.name === fieldName)) {\n          this.logger.warn(\n            `Ignoring field ${model.singularName}.${fieldName} because it's not in the schema.`\n          );\n\n          // TODO: Move skipFields to the model\n          model.baseModel.skipFields = model.baseModel.skipFields ? model.baseModel.skipFields : [];\n          if (!model.baseModel.skipFields.includes(fieldName)) {\n            model.baseModel.skipFields.push(fieldName);\n          }\n        }\n      });\n    });\n\n    if (this.connectionQueryMode === \"auto\") {\n      this.connectionQueryMode = this.schema!.determineQueryMode();\n      this.logger.log(\n        `Connection Query Mode is ${this.connectionQueryMode} by automatic detection`\n      );\n    } else {\n      this.logger.log(`Connection Query Mode is ${this.connectionQueryMode} by config`);\n    }\n  }\n\n  /**\n   * Returns a model from the model collection by it's name\n   *\n   * @param {Model|string} model A Model instance, a singular or plural name of the model\n   * @param {boolean} allowNull When true this method returns null instead of throwing an exception when no model was\n   *                            found. Default is false\n   * @returns {Model}\n   */\n  public getModel(model: Model | string, allowNull: boolean = false): Model {\n    if (typeof model === \"string\") {\n      const name: string = singularize(downcaseFirstLetter(model));\n      model = this.models.get(name) as Model;\n      if (!allowNull && !model) throw new Error(`No such model ${name}!`);\n    }\n\n    return model;\n  }\n\n  /**\n   * Will add a mock for simple mutations or queries. These are model unrelated and have to be\n   * handled  globally.\n   *\n   * @param {Mock} mock - Mock config.\n   */\n  public addGlobalMock(mock: Mock): boolean {\n    if (this.findGlobalMock(mock.action, mock.options)) return false;\n    if (!this.globalMocks[mock.action]) this.globalMocks[mock.action] = [];\n\n    this.globalMocks[mock.action].push(mock);\n    return true;\n  }\n\n  /**\n   * Finds a global mock for the given action and options.\n   *\n   * @param {string} action - Name of the action like 'simpleQuery' or 'simpleMutation'.\n   * @param {MockOptions} options - MockOptions like { name: 'example' }.\n   * @returns {Mock | null} null when no mock was found.\n   */\n  public findGlobalMock(action: string, options: MockOptions | undefined): Mock | null {\n    if (this.globalMocks[action]) {\n      return (\n        this.globalMocks[action].find(m => {\n          if (!m.options || !options) return true;\n\n          const relevantOptions = pick(options, Object.keys(m.options));\n          return isEqual(relevantOptions, m.options || {});\n        }) || null\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Hook to be called by simpleMutation and simpleQuery actions in order to get the global mock\n   * returnValue.\n   *\n   * @param {string} action - Name of the action like 'simpleQuery' or 'simpleMutation'.\n   * @param {MockOptions} options - MockOptions.\n   * @returns {any} null when no mock was found.\n   */\n  public globalMockHook(action: string, options: MockOptions): any {\n    let returnValue: null | { [key: string]: any } = null;\n    const mock = this.findGlobalMock(action, options);\n\n    if (mock) {\n      if (mock.returnValue instanceof Function) {\n        returnValue = mock.returnValue();\n      } else {\n        returnValue = mock.returnValue || null;\n      }\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Wraps all Vuex-ORM entities in a Model object and saves them into this.models\n   */\n  private collectModels() {\n    this.database.entities.forEach((entity: any) => {\n      const model: Model = new Model(entity.model as ORMModel);\n      this.models.set(model.singularName, model);\n      Model.augment(model);\n    });\n  }\n}\n","import { Relation } from \"@vuex-orm/core\";\nimport Model from \"../orm/model\";\nimport { Arguments, Field, GraphQLField } from \"../support/interfaces\";\nimport { clone, isPlainObject, takeWhile, upcaseFirstLetter } from \"../support/utils\";\n// import gql from \"graphql-tag\";\nimport Context from \"../common/context\";\nimport Schema from \"./schema\";\n\n/**\n * Contains all logic to build GraphQL queries/mutations.\n */\nexport default class QueryBuilder {\n  /**\n   * Builds a field for the GraphQL query and a specific model\n   *\n   * @param {Model|string} model The model to use\n   * @param {boolean} multiple Determines whether plural/nodes syntax or singular syntax is used.\n   * @param {Arguments} args The args that will be passed to the query field ( user(role: $role) )\n   * @param {Array<Model>} path The relations in this list are ignored (while traversing relations).\n   *                                    Mainly for recursion\n   * @param {string} name Optional name of the field. If not provided, this will be the model name\n   * @param filter\n   * @param {boolean} allowIdFields Optional. Determines if id fields will be ignored for the argument generation.\n   *                                See buildArguments\n   * @returns {string}\n   *\n   * @todo Do we need the allowIdFields param?\n   */\n  public static buildField(\n    model: Model | string,\n    multiple: boolean = true,\n    args?: Arguments,\n    path: Array<string> = [],\n    name?: string,\n    filter: boolean = false,\n    allowIdFields: boolean = false\n  ): string {\n    const context = Context.getInstance();\n    model = context.getModel(model);\n\n    name = name ? name : model.pluralName;\n    const field = context.schema!.getMutation(name, true) || context.schema!.getQuery(name, true);\n\n    let params: string = this.buildArguments(model, args, false, filter, allowIdFields, field);\n    path = path.length === 0 ? [model.singularName] : path;\n\n    const fields = `\n      ${model.getQueryFields().join(\" \")}\n      ${this.buildRelationsQuery(model, path)}\n    `;\n\n    if (multiple) {\n      const header: string = `${name}${params}`;\n\n      if (context.connectionQueryMode === \"nodes\") {\n        return `\n          ${header} {\n            nodes {\n              ${fields}\n            }\n          }\n        `;\n      } else if (context.connectionQueryMode === \"edges\") {\n        return `\n          ${header} {\n            edges {\n              node {\n                ${fields}\n              }\n            }\n          }\n        `;\n      } else {\n        return `\n          ${header} {\n            ${fields}\n          }\n        `;\n      }\n    } else {\n      return `\n        ${name ? name : model.singularName}${params} {\n          ${fields}\n        }\n      `;\n    }\n  }\n\n  /**\n   * Generates a query.\n   * Currently only one root field for the query is possible.\n   * @param {string} type 'mutation' or 'query'\n   * @param {Model | string} model The model this query or mutation affects. This mainly determines the query fields.\n   * @param {string} name Optional name of the query/mutation. Will overwrite the name from the model.\n   * @param {Arguments} args Arguments for the query\n   * @param {boolean} multiple Determines if the root query field is a connection or not (will be passed to buildField)\n   * @param {boolean} filter When true the query arguments are passed via a filter object.\n   * @returns {any} Whatever gql() returns\n   */\n  public static buildQuery(\n    type: string,\n    model: Model | string,\n    name?: string,\n    args?: Arguments,\n    multiple?: boolean,\n    filter?: boolean\n  ) {\n    const context = Context.getInstance();\n\n    model = context.getModel(model);\n    args = (args ? clone(args) : {}) as Arguments;\n\n    Object.keys(args).forEach((key: string) => {\n      if (args && args[key] && isPlainObject(args[key])) {\n        args[key] = { __type: upcaseFirstLetter(key) };\n      }\n    });\n\n    // multiple\n    multiple = multiple === undefined ? !args[\"id\"] : multiple;\n\n    // name\n    if (!name) name = multiple ? model.pluralName : model.singularName;\n\n    // field\n    const field = context.schema!.getMutation(name, true) || context.schema!.getQuery(name, true);\n\n    // build query\n    const query: string =\n      `${type} ${upcaseFirstLetter(name)}${this.buildArguments(\n        model,\n        args,\n        true,\n        filter,\n        true,\n        field\n      )} {\\n` +\n      `  ${this.buildField(model, multiple, args, [], name, filter, true)}\\n` +\n      `}`;\n\n    return query;\n  }\n\n  /**\n   * Generates the arguments string for a graphql query based on a given map.\n   *\n   * There are three types of arguments:\n   *\n   * 1) Signatures with primitive types (signature = true)\n   *      => 'mutation createUser($name: String!)'\n   *\n   * 2) Signatures with object types (signature = true, args = { user: { __type: 'User' }})\n   *      => 'mutation createUser($user: UserInput!)'\n   *\n   * 3) Fields with variables (signature = false)\n   *      => 'user(id: $id)'\n   *\n   * 4) Filter fields with variables (signature = false, filter = true)\n   *      => 'users(filter: { active: $active })'\n   *\n   * @param model\n   * @param {Arguments | undefined} args\n   * @param {boolean} signature When true, then this method generates a query signature instead of key/value pairs\n   * @param filter\n   * @param {boolean} allowIdFields If true, ID fields will be included in the arguments list\n   * @param {GraphQLField} field Optional. The GraphQL mutation or query field\n   * @returns {String}\n   */\n  public static buildArguments(\n    model: Model,\n    args?: Arguments,\n    signature: boolean = false,\n    filter: boolean = false,\n    allowIdFields: boolean = true,\n    field: GraphQLField | null = null\n  ): string {\n    if (args === undefined) return \"\";\n\n    let returnValue: string = \"\";\n    let first: boolean = true;\n\n    if (args) {\n      Object.keys(args).forEach((key: string) => {\n        let value: any = args[key];\n\n        const isForeignKey = model.skipField(key);\n        const skipFieldDueId = (key === \"id\" || isForeignKey) && !allowIdFields;\n\n        let schemaField: GraphQLField | undefined = this.findSchemaFieldForArgument(\n          key,\n          field,\n          model,\n          filter\n        );\n\n        const isConnectionField =\n          schemaField && Schema.getTypeNameOfField(schemaField).endsWith(\"TypeConnection\");\n\n        // Ignore null fields, ids and connections\n        if (value && !skipFieldDueId && !isConnectionField) {\n          let typeOrValue: any = \"\";\n\n          if (signature) {\n            if (isPlainObject(value) && value.__type) {\n              // Case 2 (User!)\n              typeOrValue = value.__type + \"Input!\";\n            } else if (Array.isArray(value) && field) {\n              const arg = QueryBuilder.findSchemaFieldForArgument(key, field, model, filter);\n\n              /* istanbul ignore next */\n              if (!arg) {\n                throw new Error(\n                  `The argument ${key} is of type array but it's not possible to determine the type, because it's not in the field ${\n                    field.name\n                  }`\n                );\n              }\n\n              typeOrValue = Schema.getTypeNameOfField(arg) + \"!\";\n            } else if (schemaField && Schema.getTypeNameOfField(schemaField)) {\n              // Case 1, 3 and 4\n              typeOrValue = Schema.getTypeNameOfField(schemaField) + \"!\";\n            } else if (key === \"id\" || isForeignKey) {\n              // Case 1 (ID!)\n              typeOrValue = \"ID!\";\n            } else {\n              // Case 1 (String!)\n              typeOrValue = this.determineAttributeType(model, key, value, field || undefined);\n              typeOrValue = typeOrValue + \"!\";\n            }\n          } else {\n            // Case 3 or 4\n            typeOrValue = `$${key}`;\n          }\n\n          returnValue = `${returnValue}${first ? \"\" : \", \"}${(signature ? \"$\" : \"\") +\n            key}: ${typeOrValue}`;\n\n          first = false;\n        }\n      });\n\n      if (!first) {\n        if (!signature && filter) returnValue = `filter: { ${returnValue} }`;\n        returnValue = `(${returnValue})`;\n      }\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Determines the GraphQL primitive type of a field in the variables hash by the field type or (when\n   * the field type is generic attribute) by the variable type.\n   * @param {Model} model\n   * @param {string} key\n   * @param {string} value\n   * @param {GraphQLField} query Pass when we have to detect the type of an argument\n   * @returns {string}\n   */\n  public static determineAttributeType(\n    model: Model,\n    key: string,\n    value: any,\n    query?: GraphQLField\n  ): string {\n    const context: Context = Context.getInstance();\n    const field: undefined | Field = model.fields.get(key);\n    let schemaField: undefined | GraphQLField;\n\n    if (query) {\n      schemaField = query.args.find(f => f.name === key);\n\n      if (!schemaField) {\n        const filterField = query.args.find(f => f.name === \"filter\");\n\n        if (filterField) {\n          schemaField = this.findSchemaFieldForArgument(key, null, model, true);\n        }\n      }\n    } else {\n      schemaField = context.schema!.getType(model.singularName)!.fields!.find(f => f.name === key);\n    }\n\n    if (schemaField && Schema.getTypeNameOfField(schemaField)) {\n      return Schema.getTypeNameOfField(schemaField);\n    } else {\n      if (field instanceof context.components.String) {\n        return \"String\";\n      } else if (field && field instanceof context.components.Number) {\n        return \"Int\";\n      } else if (field && field instanceof context.components.Boolean) {\n        return \"Boolean\";\n      } else {\n        if (typeof value === \"number\") return \"Int\";\n        if (typeof value === \"string\") return \"String\";\n        if (typeof value === \"boolean\") return \"Boolean\";\n\n        throw new Error(\n          `Can't find suitable graphql type for field '${model.singularName}.${key}'.`\n        );\n      }\n    }\n  }\n\n  private static findSchemaFieldForArgument(\n    name: String,\n    field: GraphQLField | null,\n    model: Model,\n    isFilter: boolean\n  ): GraphQLField | undefined {\n    const schema = Context.getInstance().schema!;\n    let schemaField: GraphQLField | undefined;\n\n    if (field) {\n      schemaField = field.args.find(f => f.name === name);\n      if (schemaField) return schemaField;\n    }\n\n    // We try to find the FilterType or at least the Type this query belongs to.\n    const type = schema.getType(model.singularName + (isFilter ? \"Filter\" : \"\"), true);\n\n    // Next we try to find the field from the type\n    schemaField = type\n      ? (isFilter ? type.inputFields! : type.fields!).find(f => f.name === name)\n      : undefined;\n\n    // Warn before we return null\n    if (!schemaField) {\n      Context.getInstance().logger.warn(\n        `Couldn't find the argument with name ${name} for the mutation/query ${\n          field ? field.name : \"(?)\"\n        }`\n      );\n    }\n\n    return schemaField;\n  }\n\n  /**\n   * Generates the fields for all related models.\n   *\n   * @param {Model} model\n   * @param {Array<Model>} path\n   * @returns {string}\n   */\n  static buildRelationsQuery(model: null | Model, path: Array<string> = []): string {\n    if (model === null) return \"\";\n\n    const context = Context.getInstance();\n    const relationQueries: Array<string> = [];\n\n    model.getRelations().forEach((field: Field, name: string) => {\n      let relatedModel: Model;\n      let fieldAsRelation: Relation = field as Relation;\n\n      if (\n        fieldAsRelation instanceof context.components.BelongsToMany ||\n        fieldAsRelation instanceof context.components.HasMany ||\n        fieldAsRelation instanceof context.components.HasManyThrough ||\n        fieldAsRelation instanceof context.components.MorphedByMany ||\n        fieldAsRelation instanceof context.components.MorphMany ||\n        fieldAsRelation instanceof context.components.MorphOne ||\n        fieldAsRelation instanceof context.components.MorphToMany ||\n        fieldAsRelation instanceof context.components.HasOne\n      ) {\n        relatedModel = context.getModel(fieldAsRelation.related.entity);\n      } else if (\n        fieldAsRelation instanceof context.components.BelongsTo ||\n        fieldAsRelation instanceof context.components.HasManyBy\n      ) {\n        relatedModel = context.getModel(fieldAsRelation.parent.entity);\n      } else if (fieldAsRelation instanceof context.components.MorphTo) {\n        relatedModel = context.getModel(fieldAsRelation.type);\n\n        /* istanbul ignore next */\n      } else {\n        relatedModel = context.getModel(name);\n\n        context.logger.log(\n          \"WARNING: unknown field type. Fallback to attribute name\",\n          fieldAsRelation\n        );\n      }\n\n      // We will ignore the field, when it's already in the path. Means: When it's already queried. However there are\n      // cases where the model will have a relationship to itself. For example a nested category strucure where the\n      // category model has a parent: belongsTo(Category). So we also check if the model references itself. If this is\n      // the case, we allow the nesting up to 5 times.\n      const referencesItSelf = takeWhile(\n        path.slice(0).reverse(),\n        (p: string) => p === relatedModel.singularName\n      ).length;\n      const ignore = referencesItSelf\n        ? referencesItSelf > 5\n        : path.includes(relatedModel.singularName);\n\n      // console.log(`-----> Will ${ignore ? '' : 'not'} ignore ${model.singularName}.${name}, path: ${path.join('.')}`);\n\n      if (model.shouldEagerLoadRelation(name, field, relatedModel) && !ignore) {\n        const newPath = path.slice(0);\n        newPath.push(relatedModel.singularName);\n\n        relationQueries.push(\n          this.buildField(relatedModel, Model.isConnection(field), undefined, newPath, name, false)\n        );\n      }\n    });\n\n    return relationQueries.join(\"\\n\");\n  }\n}\n","import { Data, DispatchFunction } from '../support/interfaces';\nimport Context from '../common/context';\n\n/**\n * Provides some helper methods to interact with the Vuex-ORM store\n */\nexport class Store {\n  /**\n   * Inserts incoming data into the store. Existing data will be updated.\n   *\n   * @param {Data} data New data to insert/update\n   * @param {Function} dispatch Vuex Dispatch method for the model\n   * @return {Promise<Data>} Inserted data as hash\n   */\n  public static async insertData (data: Data, dispatch: DispatchFunction): Promise<Data> {\n    let insertedData: Data = {};\n\n    await Promise.all(Object.keys(data).map(async (key) => {\n      const value = data[key];\n      Context.getInstance().logger.log('Inserting records', value);\n      const newData = await dispatch('insertOrUpdate', { data: value });\n\n      Object.keys(newData).forEach((dataKey) => {\n        if (!insertedData[dataKey]) insertedData[dataKey] = [];\n        insertedData[dataKey] = insertedData[dataKey].concat(newData[dataKey]);\n      });\n    }));\n\n    return insertedData;\n  }\n}\n","import Model from \"../orm/model\";\nimport { upcaseFirstLetter } from \"../support/utils\";\n\n/**\n * Generic name generator for mutations and queries. In the future these methods may be influenced by the configuration.\n */\nexport default class NameGenerator {\n  public static getNameForPersist(model: Model) {\n    return this.getCRUDName(\"create\", model);\n  }\n\n  public static getNameForPush(model: Model) {\n    return this.getCRUDName(\"update\", model);\n  }\n\n  public static getNameForDestroy(model: Model) {\n    return this.getCRUDName(\"delete\", model);\n  }\n\n  public static getNameForFetch(model: Model, plural: boolean = false) {\n    return plural ? model.pluralName : model.singularName;\n  }\n\n  /**\n   * Internal helper to keep the code DRY. Just generates a name by leveraging the models singular name.\n   * @param {string} action Name of the action like 'create'\n   * @param {Model} model\n   * @returns {string} For example 'createBlogPost'\n   */\n  private static getCRUDName(action: string, model: Model) {\n    return `${action}${upcaseFirstLetter(model.singularName)}`;\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport { Arguments, Data, DispatchFunction } from \"../support/interfaces\";\nimport Model from \"../orm/model\";\nimport RootState from \"@vuex-orm/core/lib/modules/contracts/RootState\";\nimport Transformer from \"../graphql/transformer\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Schema from \"../graphql/schema\";\nimport { singularize } from \"../support/utils\";\n\n/**\n * Base class for all Vuex actions. Contains some utility and convenience methods.\n */\nexport default class Action {\n  /**\n   * Sends a mutation.\n   *\n   * @param {string} name Name of the mutation like 'createUser'\n   * @param {Data | undefined} variables Variables to send with the mutation\n   * @param {Function} dispatch Vuex Dispatch method for the model\n   * @param {Model} model The model this mutation affects.\n   * @param {boolean} multiple Tells if we're requesting a single record or multiple.\n   * @returns {Promise<any>}\n   */\n  protected static async mutation(\n    name: string,\n    variables: Data | undefined,\n    dispatch: DispatchFunction,\n    model: Model\n  ): Promise<any> {\n    if (variables) {\n      const context: Context = Context.getInstance();\n      const schema: Schema = context.schema || (await context.loadSchema());\n\n      const multiple: boolean = Schema.returnsConnection(schema.getMutation(name)!);\n      const query = QueryBuilder.buildQuery(\"mutation\", model, name, variables, multiple);\n\n      // Send GraphQL Mutation\n      let newData = await Context.getInstance().apollo.request(model, query, variables, true);\n\n      // When this was not a destroy action, we get new data, which we should insert in the store\n      if (name !== NameGenerator.getNameForDestroy(model)) {\n        newData = newData[Object.keys(newData)[0]];\n\n        // IDs as String cause terrible issues, so we convert them to integers.\n        newData.id = parseInt(newData.id, 10);\n\n        const insertedData: Data = await Store.insertData(\n          { [model.pluralName]: newData },\n          dispatch\n        );\n\n        // Try to find the record to return\n        const records = insertedData[model.pluralName];\n        const newRecord = records[records.length - 1];\n        if (newRecord) {\n          return newRecord;\n        } else {\n          Context.getInstance().logger.log(\n            \"Couldn't find the record of type '\",\n            model.pluralName,\n            \"' within\",\n            insertedData,\n            \". Falling back to find()\"\n          );\n          return model.baseModel.query().last();\n        }\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Convenience method to get the model from the state.\n   * @param {RootState} state Vuex state\n   * @returns {Model}\n   */\n  static getModelFromState(state: RootState): Model {\n    return Context.getInstance().getModel(state.$name);\n  }\n\n  /**\n   * Makes sure args is a hash.\n   *\n   * @param {Arguments|undefined} args\n   * @param {any} id When not undefined, it's added to the args\n   * @returns {Arguments}\n   */\n  static prepareArgs(args?: Arguments, id?: any): Arguments {\n    args = args || {};\n    if (id) args[\"id\"] = id;\n\n    return args;\n  }\n\n  /**\n   * Adds the record itself to the args and sends it through transformOutgoingData. Key is named by the singular name\n   * of the model.\n   *\n   * @param {Arguments} args\n   * @param {Model} model\n   * @param {Data} data\n   * @returns {Arguments}\n   */\n  static addRecordToArgs(args: Arguments, model: Model, data: Data): Arguments {\n    args[model.singularName] = Transformer.transformOutgoingData(model, data);\n    return args;\n  }\n\n  /**\n   * Transforms each field of the args which contains a model.\n   * @param {Arguments} args\n   * @returns {Arguments}\n   */\n  protected static transformArgs(args: Arguments): Arguments {\n    const context = Context.getInstance();\n\n    Object.keys(args).forEach((key: string) => {\n      const value: any = args[key];\n\n      if (value instanceof context.components.Model) {\n        const model = context.getModel(singularize(value.$self().entity));\n        const transformedValue = Transformer.transformOutgoingData(model, value);\n        context.logger.log(\n          \"A\",\n          key,\n          \"model was found within the variables and will be transformed from\",\n          value,\n          \"to\",\n          transformedValue\n        );\n        args[key] = transformedValue;\n      }\n    });\n\n    return args;\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Destroy action for sending a delete mutation. Will be used for record.$destroy().\n */\nexport default class Destroy extends Action {\n  /**\n   * @param {State} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} id ID of the record to delete\n   * @returns {Promise<any>} true\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { id, args }: ActionParams\n  ): Promise<boolean> {\n    if (id) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForDestroy(model);\n\n      const mockReturnValue = model.$mockHook(\"destroy\", { id });\n\n      if (mockReturnValue) {\n        await Store.insertData(mockReturnValue, dispatch!);\n        return true;\n      }\n\n      args = this.prepareArgs(args, id);\n\n      await Action.mutation(mutationName, args, dispatch!, model);\n      return true;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The destroy action requires the 'id' to be set\");\n    }\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport Transformer from \"../graphql/transformer\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\n\n/**\n * Fetch action for sending a query. Will be used for Model.fetch().\n */\nexport default class Fetch extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {ActionParams} params Optional params to send with the query\n   * @returns {Promise<Data>} The fetched records as hash\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    params?: ActionParams\n  ): Promise<Data> {\n    const context = Context.getInstance();\n    const model = this.getModelFromState(state!);\n\n    const mockReturnValue = model.$mockHook(\"fetch\", {\n      filter: params ? params.filter || {} : {}\n    });\n\n    if (mockReturnValue) {\n      return Store.insertData(mockReturnValue, dispatch!);\n    }\n\n    if (!context.schema) {\n      await context.loadSchema();\n    }\n\n    // Filter\n    const filter =\n      params && params.filter\n        ? Transformer.transformOutgoingData(model, params.filter, Object.keys(params.filter))\n        : {};\n\n    const bypassCache = params && params.bypassCache;\n\n    // When the filter contains an id, we query in singular mode\n    const multiple: boolean = !filter[\"id\"];\n    const name: string = NameGenerator.getNameForFetch(model, multiple);\n    if (params && params.beforeBuildQuery) params.beforeBuildQuery();\n    const query = QueryBuilder.buildQuery(\"query\", model, name, filter, multiple, multiple);\n    if (params && params.afterBuildQuery) params.afterBuildQuery();\n\n    // Send the request to the GraphQL API\n    const data = await context.apollo.request(model, query, filter, false, bypassCache as boolean);\n\n    // Insert incoming data into the store\n    return Store.insertData(data, dispatch!);\n  }\n}\n","import { ActionParams, Arguments, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport Schema from \"../graphql/schema\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Mutate action for sending a custom mutation. Will be used for Model.mutate() and record.$mutate().\n */\nexport default class Mutate extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} name Name of the query\n   * @param {boolean} multiple Fetch one or multiple?\n   * @param {Arguments} args Arguments for the mutation. Must contain a 'mutation' field.\n   * @returns {Promise<Data>} The new record if any\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { args, name }: ActionParams\n  ): Promise<Data> {\n    if (name) {\n      const context: Context = Context.getInstance();\n      const model = this.getModelFromState(state!);\n\n      const mockReturnValue = model.$mockHook(\"mutate\", {\n        name,\n        args: args || {}\n      });\n\n      if (mockReturnValue) {\n        return Store.insertData(mockReturnValue, dispatch!);\n      }\n\n      const schema: Schema = context.schema || (await context.loadSchema());\n      args = this.prepareArgs(args);\n\n      // There could be anything in the args, but we have to be sure that all records are gone through\n      // transformOutgoingData()\n      this.transformArgs(args);\n\n      // Send the mutation\n      return Action.mutation(name, args, dispatch!, model);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The mutate action requires the mutation name ('mutation') to be set\");\n    }\n  }\n}\n","import Context from \"../common/context\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Model from \"../orm/model\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Persist action for sending a create mutation. Will be used for record.$persist().\n */\nexport default class Persist extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} id ID of the record to persist\n   * @returns {Promise<Data>} The saved record\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { id, args }: ActionParams\n  ): Promise<Data> {\n    if (id) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForPersist(model);\n      const oldRecord = model.getRecordWithId(id);\n\n      const mockReturnValue = model.$mockHook(\"persist\", {\n        id,\n        args: args || {}\n      });\n\n      if (mockReturnValue) {\n        const newRecord = Store.insertData(mockReturnValue, dispatch!);\n        await this.deleteObsoleteRecord(model, newRecord, oldRecord);\n        return newRecord;\n      }\n\n      // Arguments\n      args = this.prepareArgs(args);\n      this.addRecordToArgs(args, model, oldRecord);\n\n      // Send mutation\n      const newRecord = await Action.mutation(mutationName, args, dispatch!, model);\n\n      // Delete the old record if necessary\n      await this.deleteObsoleteRecord(model, newRecord, oldRecord);\n\n      return newRecord;\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The persist action requires the 'id' to be set\");\n    }\n  }\n\n  /**\n   * It's very likely that the server generated different ID for this record.\n   * In this case Action.mutation has inserted a new record instead of updating the existing one.\n   *\n   * @param {Model} model\n   * @param {Data} record\n   * @returns {Promise<void>}\n   */\n  private static async deleteObsoleteRecord(model: Model, newRecord: Data, oldRecord: Data) {\n    if (newRecord && oldRecord && newRecord.id !== oldRecord.id) {\n      Context.getInstance().logger.log(\"Dropping deprecated record\", oldRecord);\n      return oldRecord.$delete();\n    }\n  }\n}\n","import { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport { Store } from \"../orm/store\";\n\n/**\n * Push action for sending a update mutation. Will be used for record.$push().\n */\nexport default class Push extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {Arguments} data New data to save\n   * @param {Arguments} args Additional arguments\n   * @returns {Promise<Data>} The updated record\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { data, args }: ActionParams\n  ): Promise<Data> {\n    if (data) {\n      const model = this.getModelFromState(state!);\n      const mutationName = NameGenerator.getNameForPush(model);\n\n      const mockReturnValue = model.$mockHook(\"push\", {\n        data,\n        args: args || {}\n      });\n\n      if (mockReturnValue) {\n        return Store.insertData(mockReturnValue, dispatch!);\n      }\n\n      // Arguments\n      args = this.prepareArgs(args, data.id);\n      this.addRecordToArgs(args, model, data);\n\n      // Send the mutation\n      return Action.mutation(mutationName, args, dispatch!, model);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The persist action requires the 'data' to be set\");\n    }\n  }\n}\n","import QueryBuilder from \"../graphql/query-builder\";\nimport Context from \"../common/context\";\nimport { Store } from \"../orm/store\";\nimport Transformer from \"../graphql/transformer\";\nimport { ActionParams, Data } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport NameGenerator from \"../graphql/name-generator\";\nimport Schema from \"../graphql/schema\";\n\n/**\n * Query action for sending a custom query. Will be used for Model.customQuery() and record.$customQuery.\n */\nexport default class Query extends Action {\n  /**\n   * @param {any} state The Vuex state\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} name Name of the query\n   * @param {boolean} multiple Fetch one or multiple?\n   * @param {object} filter Filter object (arguments)\n   * @param {boolean} bypassCache Whether to bypass the cache\n   * @returns {Promise<Data>} The fetched records as hash\n   */\n  public static async call(\n    { state, dispatch }: ActionParams,\n    { name, filter, bypassCache }: ActionParams\n  ): Promise<Data> {\n    if (name) {\n      const context: Context = Context.getInstance();\n      const model = this.getModelFromState(state!);\n\n      const mockReturnValue = model.$mockHook(\"query\", {\n        name,\n        filter: filter || {}\n      });\n\n      if (mockReturnValue) {\n        return Store.insertData(mockReturnValue, dispatch!);\n      }\n\n      const schema: Schema = context.schema || (await context.loadSchema());\n\n      // Filter\n      filter = filter ? Transformer.transformOutgoingData(model, filter) : {};\n\n      // Multiple?\n      const multiple: boolean = Schema.returnsConnection(schema.getQuery(name)!);\n\n      // Build query\n      const query = QueryBuilder.buildQuery(\"query\", model, name, filter, multiple, false);\n\n      // Send the request to the GraphQL API\n      const data = await context.apollo.request(\n        model,\n        query,\n        filter,\n        false,\n        bypassCache as boolean\n      );\n\n      // Insert incoming data into the store\n      return Store.insertData(data, dispatch!);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The customQuery action requires the query name ('name') to be set\");\n    }\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport { clone, graphQlDocumentToString, parseQuery, removeSymbols } from \"../support/utils\";\n\n/**\n * SimpleQuery action for sending a model unrelated simple query.\n */\nexport default class SimpleQuery extends Action {\n  /**\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} query The query to send\n   * @param {Arguments} variables\n   * @param {boolean} bypassCache Whether to bypass the cache\n   * @returns {Promise<any>} The result\n   */\n  public static async call(\n    { dispatch }: ActionParams,\n    { query, bypassCache, variables }: ActionParams\n  ): Promise<any> {\n    const context: Context = Context.getInstance();\n\n    if (query) {\n      const parsedQuery = parseQuery(query);\n\n      // const mockReturnValue = context.globalMockHook(\"simpleQuery\", {\n      //   name: parsedQuery.definitions[0][\"name\"].value,\n      //   variables\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return mockReturnValue;\n      // }\n\n      variables = this.prepareArgs(variables);\n\n      const result = await context.apollo.simpleQuery(\n        graphQlDocumentToString(parsedQuery),\n        variables,\n        bypassCache\n      );\n\n      // remove the symbols\n      return removeSymbols(clone(result.data));\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The simpleQuery action requires the 'query' to be set\");\n    }\n  }\n}\n","import { ActionParams } from \"../support/interfaces\";\nimport Action from \"./action\";\nimport Context from \"../common/context\";\nimport { clone, graphQlDocumentToString, parseQuery } from \"../support/utils\";\n\n/**\n * SimpleMutation action for sending a model unrelated simple mutation.\n */\nexport default class SimpleMutation extends Action {\n  /**\n   * @param {DispatchFunction} dispatch Vuex Dispatch method for the model\n   * @param {string} query The query to send\n   * @param {Arguments} variables\n   * @returns {Promise<any>} The result\n   */\n  public static async call(\n    { dispatch }: ActionParams,\n    { query, variables }: ActionParams\n  ): Promise<any> {\n    const context: Context = Context.getInstance();\n\n    if (query) {\n      const parsedQuery = parseQuery(query);\n\n      // const mockReturnValue = context.globalMockHook(\"simpleMutation\", {\n      //   name: parsedQuery.definitions[0][\"name\"].value,\n      //   variables\n      // });\n      //\n      // if (mockReturnValue) {\n      //   return mockReturnValue;\n      // }\n\n      variables = this.prepareArgs(variables);\n      const result = await context.apollo.simpleMutation(\n        graphQlDocumentToString(parsedQuery),\n        variables\n      );\n\n      // remove the symbols\n      return clone(result.data);\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"The simpleMutation action requires the 'query' to be set\");\n    }\n  }\n}\n","import { PatchedModel, Options, ActionParams } from \"./support/interfaces\";\nimport Context from \"./common/context\";\nimport { Components } from \"@vuex-orm/core/lib/plugins/use\";\nimport { Destroy, Fetch, Mutate, Persist, Push } from \"./actions\";\nimport Query from \"./actions/query\";\nimport SimpleQuery from \"./actions/simple-query\";\nimport SimpleMutation from \"./actions/simple-mutation\";\nimport { isPlainObject } from \"./support/utils\";\n\n/**\n * Main class of the plugin. Setups the internal context, Vuex actions and model methods\n */\nexport default class VuexORMGraphQL {\n  /**\n   * @constructor\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   */\n  public constructor(components: Components, options: Options) {\n    Context.setup(components, options);\n    VuexORMGraphQL.setupActions();\n    VuexORMGraphQL.setupModelMethods();\n  }\n\n  /**\n   * Allow everything to read the context.\n   */\n  public getContext(): Context {\n    return Context.getInstance();\n  }\n\n  /**\n   * This method will setup following Vuex actions: fetch, persist, push, destroy, mutate\n   */\n  private static setupActions() {\n    const context = Context.getInstance();\n\n    context.components.RootActions.simpleQuery = SimpleQuery.call.bind(SimpleQuery);\n    context.components.RootActions.simpleMutation = SimpleMutation.call.bind(SimpleMutation);\n\n    context.components.Actions.fetch = Fetch.call.bind(Fetch);\n    context.components.Actions.persist = Persist.call.bind(Persist);\n    context.components.Actions.push = Push.call.bind(Push);\n    context.components.Actions.destroy = Destroy.call.bind(Destroy);\n    context.components.Actions.mutate = Mutate.call.bind(Mutate);\n    context.components.Actions.query = Query.call.bind(Query);\n  }\n\n  /**\n   * This method will setup following model methods: Model.fetch, Model.mutate, Model.customQuery, record.$mutate,\n   * record.$persist, record.$push, record.$destroy and record.$deleteAndDestroy, record.$customQuery\n   */\n  private static setupModelMethods() {\n    const context = Context.getInstance();\n\n    // Register static model convenience methods\n    (context.components.Model as typeof PatchedModel).fetch = async function(\n      filter: any,\n      bypassCache = false\n    ) {\n      let filterObj = filter;\n      if (!isPlainObject(filterObj)) {\n        filterObj = { id: filter };\n      }\n      return this.dispatch(\"fetch\", { filter: filterObj, bypassCache });\n    };\n\n    (context.components.Model as typeof PatchedModel).mutate = async function(\n      params: ActionParams\n    ) {\n      return this.dispatch(\"mutate\", params);\n    };\n\n    (context.components.Model as typeof PatchedModel).customQuery = async function({\n      name,\n      filter,\n      multiple,\n      bypassCache\n    }: ActionParams) {\n      return this.dispatch(\"query\", { name, filter, multiple, bypassCache });\n    };\n\n    // Register model convenience methods\n    const model = context.components.Model.prototype;\n\n    model.$mutate = async function({ name, args, multiple }: ActionParams) {\n      args = args || {};\n      if (!args[\"id\"]) args[\"id\"] = this.id;\n      return this.$dispatch(\"mutate\", { name, args, multiple });\n    };\n\n    model.$customQuery = async function({ name, filter, multiple, bypassCache }: ActionParams) {\n      filter = filter || {};\n      if (!filter[\"id\"]) filter[\"id\"] = this.id;\n      return this.$dispatch(\"query\", { name, filter, multiple, bypassCache });\n    };\n\n    model.$persist = async function(args: any) {\n      return this.$dispatch(\"persist\", { id: this.id, args });\n    };\n\n    model.$push = async function(args: any) {\n      return this.$dispatch(\"push\", { data: this, args });\n    };\n\n    model.$destroy = async function() {\n      return this.$dispatch(\"destroy\", { id: this.id });\n    };\n\n    model.$deleteAndDestroy = async function() {\n      await this.$delete();\n      return this.$destroy();\n    };\n  }\n}\n","import VuexORMGraphQL from './vuex-orm-graphql';\nimport { Components, Plugin } from '@vuex-orm/core/lib/plugins/use';\nimport { Options } from './support/interfaces';\n\n/**\n * Plugin class. This just provides a static install method for Vuex-ORM and stores the instance of the model\n * within this.instance.\n */\nexport default class VuexORMGraphQLPlugin implements Plugin {\n  /**\n   * Contains the instance of VuexORMGraphQL\n   */\n  public static instance: VuexORMGraphQL;\n\n  /**\n   * This is called, when VuexORM.install(VuexOrmGraphQL, options) is called.\n   *\n   * @param {Components} components The Vuex-ORM Components collection\n   * @param {Options} options The options passed to VuexORM.install\n   * @returns {VuexORMGraphQL}\n   */\n  public static install (components: Components, options: Options): VuexORMGraphQL {\n    VuexORMGraphQLPlugin.instance = new VuexORMGraphQL(components, options);\n    return VuexORMGraphQLPlugin.instance;\n  }\n}\n","import { Model as ORMModel } from \"@vuex-orm/core\";\nimport Context from \"./common/context\";\nimport Model from \"./orm/model\";\nimport VuexORMGraphQLPlugin from \"./index\";\n\nlet context: Context | null = null;\n\nexport function setupTestUtils(plugin: typeof VuexORMGraphQLPlugin): void {\n  /* istanbul ignore next */\n  if (!plugin.instance) {\n    throw new Error(\"Please call this function after setting up the store!\");\n  }\n\n  context = plugin.instance.getContext();\n}\n\nexport interface MockOptions {\n  [key: string]: any;\n}\n\ntype ReturnObject = { [key: string]: any };\n\nexport type ReturnValue =\n  | (() => ReturnObject | Array<ReturnObject>)\n  | ReturnObject\n  | Array<ReturnObject>;\n\nexport class Mock {\n  public readonly action: string;\n  public readonly options?: MockOptions;\n  public modelClass?: typeof ORMModel;\n  public returnValue?: ReturnValue;\n\n  constructor(action: string, options?: MockOptions) {\n    this.action = action;\n    this.options = options;\n  }\n\n  public for(modelClass: typeof ORMModel): Mock {\n    this.modelClass = modelClass;\n    return this;\n  }\n\n  public andReturn(returnValue: ReturnValue): Mock {\n    this.returnValue = returnValue;\n    this.installMock();\n    return this;\n  }\n\n  private installMock(): void {\n    if (this.action === \"simpleQuery\" || this.action === \"simpleMutation\") {\n      context!.addGlobalMock(this);\n    } else {\n      const model: Model = context!.getModel(this.modelClass!.entity);\n      model.$addMock(this);\n    }\n  }\n}\n\nexport async function clearORMStore() {\n  /* istanbul ignore next */\n  if (!context) {\n    throw new Error(\"Please call setupTestUtils() before!\");\n  }\n\n  await context.database.store.dispatch(\"entities/deleteAll\");\n}\n\nexport function mock(action: string, options?: MockOptions): Mock {\n  /* istanbul ignore next */\n  if (!context) {\n    throw new Error(\"Please call setupTestUtils() before!\");\n  }\n\n  return new Mock(action, options);\n}\n"],"names":["LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","MAX_SAFE_INTEGER","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","global","Object","freeSelf","self","root","Function","freeExports","exports","nodeType","freeModule","module","moduleExports","freeProcess","process","nodeUtil","binding","e","nodeIsTypedArray","isTypedArray","arraySome","array","predicate","index","length","mapToArray","map","result","Array","size","forEach","value","key","setToArray","set","uid","func","transform","arrayProto","prototype","funcProto","objectProto","coreJsData","funcToString","toString","hasOwnProperty","maskSrcKey","exec","keys","IE_PROTO","nativeObjectToString","reIsNative","RegExp","call","replace","Buffer","undefined","Symbol","Uint8Array","propertyIsEnumerable","splice","symToStringTag","toStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","arg","DataView","getNative","Map","Promise","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","this","clear","entry","ListCache","MapCache","SetCache","values","__data__","add","Stack","data","arrayLikeKeys","inherited","isArr","isArray","isArg","isArguments","isBuff","isType","skipIndexes","n","iteratee","baseTimes","String","isIndex","push","assocIndexOf","eq","baseGetTag","isOwn","tag","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","stack","object","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","name","message","convert","isPartial","stacked","get","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","constructor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isFunction","test","baseKeys","Ctor","proto","arrLength","seen","arrValue","othIndex","has","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","type","getValue","pop","hash","string","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","resolve","ctorString","arguments","isLength","baseUnary","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","getPrototypeOf","objectCreate","create","isArrayLike","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","input","initCloneArray","source","copyArray","isFunc","slice","copy","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","cache","pluralize","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","restoreCase","word","token","toUpperCase","charAt","substr","toLowerCase","match","str","args","sanitizeWord","rules","len","replaceWord","replaceMap","keepMap","checkWord","bool","count","inclusive","pluralized","singular","plural","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single","pluralizeLib","singularize","upcaseFirstLetter","downcaseFirstLetter","prettify","query","parseQuery","graphQlDocumentToString","isPlainObject","obj","pick","prop","isEqual","a","b","lodashIsEqual","clone","lodashClone","enabled","log","_i","console","groupCollapsed","PREFIX","messages","groupEnd","warn","variables","fetchPolicy","prettified","group","split","trim","error","baseModel","singularName","entity","pluralName","fields","field","context","Context","getInstance","components","Number","Increment","Attr","Boolean","BelongsTo","HasOne","MorphTo","MorphOne","model","originalFieldGenerator","bind","originalFields","boolean","Model","isFieldAttribute","_this","skipField","startsWith","skipFields","indexOf","shouldSkipField","getRelations","relation","foreignKey","relations","found","models","MorphMany","MorphedByMany","MorphToMany","related","id","withAllRecursive","where","first","fieldName","relatedModel","eagerLoad","find","mock","$findMock","action","options","mocks","m","returnValue","r","$isPersisted","whitelist","includes","parent","getModel","arrayModel_1","v","transformOutgoingData","$id","$self","mutation","recursiveCall","logger","d","transformIncomingData","localModel","nodes","connectionQueryMode","edges","newKey","isFieldNumber","parseFloat","endsWith","isTypeFieldOfPolymorphicRelation","apolloClient","bypassCache","logQuery","headers","Apollo","getHeaders","mutate","_a","Transformer","response","schema","types","mutations","queries","t","getType","f","connection","typeName","Schema","getTypeNameOfField","Error","allowNull","kind","getRealType","ofType","database","debugMode","debug","Logger","instance","apollo","collectModels","schemaWillBeLoaded","reject","X-GraphQL-Introspection-Query","simpleQuery","__schema","processSchema","determineQueryMode","name_1","findGlobalMock","globalMocks","entities","augment","multiple","path","filter","allowIdFields","getMutation","getQuery","params","buildArguments","getQueryFields","join","buildRelationsQuery","header","__type","buildField","signature","isForeignKey","skipFieldDueId","schemaField","findSchemaFieldForArgument","isConnectionField","typeOrValue","QueryBuilder","determineAttributeType","isFilter","inputFields","relationQueries","fieldAsRelation","BelongsToMany","HasMany","HasManyThrough","HasManyBy","referencesItSelf","takeWhile","reverse","p","ignore","shouldEagerLoadRelation","newPath","isConnection","dispatch","all","newData","dataKey","insertedData","concat","getCRUDName","loadSchema","_c","returnsConnection","buildQuery","request","NameGenerator","getNameForDestroy","parseInt","Store","insertData","records","newRecord","last","state","$name","transformedValue","_b","getModelFromState","$mockHook","mockReturnValue","prepareArgs","Action","mutationName","getNameForFetch","beforeBuildQuery","afterBuildQuery","_d","transformArgs","getNameForPersist","getRecordWithId","deleteObsoleteRecord","newRecord_1","oldRecord","addRecordToArgs","$delete","getNameForPush","parsedQuery","JSON","parse","stringify","simpleMutation","setup","setupActions","setupModelMethods","RootActions","SimpleQuery","SimpleMutation","Actions","fetch","Fetch","persist","Persist","Push","destroy","Destroy","Mutate","Query","filterObj","customQuery","$mutate","$dispatch","$customQuery","$persist","$push","$destroy","$deleteAndDestroy","VuexORMGraphQL","VuexORMGraphQLPlugin","modelClass","installMock","addGlobalMock","$addMock","plugin","getContext","Mock","store"],"mappings":"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CAA2C,OAC3C,kGAAmG,QACnG,gCAAiC,SACjC,2BAA4B,SAC5B,iBAAkB,UAClB,wHAAyH,QACzH,qGAAsG,QACtG,QAAS,QACT,2CAA4C,YAC5C,oBAAqB,UACrB,uBAAwB,UACxB,oBAAqB,SACrB,gDAAiD,WACjD,sBAAuB,UACvB,sBAAuB,WACvB,oBAAqB,UACrB,SAAU,OACV,WAAY,QACZ,OAAQ,QACT3O,QAAQ,SAAU2O,GAClB,OAAOP,EAAUiC,cAAc1B,EAAK,GAAIA,EAAK,QAO5C,MAAO,KACP,SAAU,OACV,gEAAiE,SACjE,kCAAmC,QACnC,QAAS,MACT,uFAAwF,SACxF,oBAAqB,SACrB,aAAc,WACd,sBAAuB,OACvB,iFAAkF,OAClF,qEAAsE,UACtE,iCAAkC,OAClC,oBAAqB,SACrB,kGAAmG,SACnG,yGAA0G,SAC1G,8FAA+F,SAC/F,0BAA2B,QAC3B,+BAAgC,SAChC,sBAAuB,SACvB,oBAAqB,WACrB,eAAgB,OAChB,YAAa,OACb,QAAS,QACV3O,QAAQ,SAAU2O,GAClB,OAAOP,EAAUmC,gBAAgB5B,EAAK,GAAIA,EAAK,OAQ/C,YACA,SACA,SACA,MACA,UACA,OACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,MACA,UACA,UACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,QACA,OACA,OACA,WACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,UACA,QACA,QACA,SACA,UACA,gBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MAEA,gBACA,SACA,SACA,YACA,WACA,QACA,WACA3O,QAAQoO,EAAUoC,oBAEbpC,GAleLvP,UAAiBuP,kNCMRA,EAAYuC,EAAaT,OACzBU,EAAcD,EAAaV,kBAQxBY,EAAkBvE,UAC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"}